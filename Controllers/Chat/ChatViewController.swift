//
//  ChatViewController.swift
//  OutPick
//
//  Created by ÍπÄÍ∞ÄÏú§ on 10/14/24.
//

import Foundation
import AVFoundation
import UIKit
import AVKit
import Combine
import PhotosUI
import Firebase
import Kingfisher
import FirebaseStorage
import CryptoKit
import Photos

// MARK: - OPStorageURLCache (Firebase Storage downloadURL cache)
actor OPStorageURLCache {
    private var cache: [String: URL] = [:]
    func url(for path: String) async throws -> URL {
        if let u = cache[path] { return u }
        let ref = Storage.storage().reference(withPath: path)
        let url = try await withCheckedThrowingContinuation { cont in
            ref.downloadURL { url, err in
                if let url { cont.resume(returning: url) }
                else { cont.resume(throwing: err ?? NSError(domain: "Storage", code: -1, userInfo: [NSLocalizedDescriptionKey: "downloadURL failed"])) }
            }
        }
        cache[path] = url
        return url
    }
}

// MARK: - OPVideoDiskCache (progressive MP4 local caching)
/// Simple on-disk cache for remote videos referenced by Firebase Storage path.
/// Key: storagePath (e.g., "videos/<room>/<msg>/video.mp4") ‚Üí hashed filename.
actor OPVideoDiskCache {
    static let shared = OPVideoDiskCache()
    private let dir: URL
    private let capacity: Int64 = 512 * 1024 * 1024 // 512MB
    
    init() {
        let base = FileManager.default.urls(for: .cachesDirectory, in: .userDomainMask)[0]
        dir = base.appendingPathComponent("Videos", isDirectory: true)
        try? FileManager.default.createDirectory(at: dir, withIntermediateDirectories: true)
    }
    
    /// Deterministic local file URL for a given logical key.
    func localURL(forKey key: String) -> URL {
        dir.appendingPathComponent(key.sha256() + ".mp4")
    }
    
    /// Returns local file URL if cached.
    func exists(forKey key: String) -> URL? {
        let u = localURL(forKey: key)
        return FileManager.default.fileExists(atPath: u.path) ? u : nil
    }
    
    /// Download and store a remote file to cache; returns the final local URL.
    @discardableResult
    func cache(from remote: URL, key: String) async throws -> URL {
        let tmp = dir.appendingPathComponent(UUID().uuidString + ".part")
        let (data, _) = try await URLSession.shared.data(from: remote)
        try data.write(to: tmp, options: .atomic)
        let dest = localURL(forKey: key)
        try? FileManager.default.removeItem(at: dest)
        try FileManager.default.moveItem(at: tmp, to: dest)
        try trimIfNeeded()
        return dest
    }
    
    /// Evict old files when capacity exceeded (LRU-ish using modification date).
    private func trimIfNeeded() throws {
        let files = try FileManager.default.contentsOfDirectory(
            at: dir,
            includingPropertiesForKeys: [.contentModificationDateKey, .fileSizeKey],
            options: [.skipsHiddenFiles]
        )
        var entries: [(url: URL, date: Date, size: Int64)] = []
        var total: Int64 = 0
        for u in files {
            let rv = try u.resourceValues(forKeys: [.contentModificationDateKey, .fileSizeKey])
            let d = rv.contentModificationDate ?? Date.distantPast
            let s = Int64(rv.fileSize ?? 0)
            total += s
            entries.append((u, d, s))
        }
        guard total > capacity else { return }
        for entry in entries.sorted(by: { $0.date < $1.date }) {
            try? FileManager.default.removeItem(at: entry.url)
            total -= entry.size
            if total <= capacity { break }
        }
    }
}

// MARK: - Utilities
fileprivate extension String {
    func sha256() -> String {
        let data = Data(self.utf8)
        let hash = SHA256.hash(data: data)
        return hash.map { String(format: "%02x", $0) }.joined()
    }
}

protocol ChatMessageCellDelegate: AnyObject {
    func cellDidLongPress(_ cell: ChatMessageCell)
}

class ChatViewController: UIViewController, UINavigationControllerDelegate, ChatModalAnimatable {
    
    // Paging buffer size for scroll triggers
    private var pagingBuffer = 200
    
    private var isInitialLoading = true
    
    @IBOutlet weak var sideMenuBtn: UIBarButtonItem!
    @IBOutlet weak var joinRoomBtn: UIButton!
    
    var swipeRecognizer: UISwipeGestureRecognizer!
    
    private var chatMessageCollectionView = ChatMessageCollectionView()
    private var dataSource: UICollectionViewDiffableDataSource<Section, Item>!
    private var cancellables = Set<AnyCancellable>()
    private var chatCustomMemucancellables = Set<AnyCancellable>()
    
    private var lastMessageDate: Date?
    private var lastReadMessageID: String?
    
    private var isUserInCurrentRoom = false
    
    private var replyMessage: ReplyPreview?
    private var messageMap: [String: ChatMessage] = [:]
    // Preloaded thumbnails for image messages (messageID -> ordered thumbnails)
    var messageImages: [String: [UIImage]] = [:]
    
    // Loading state flags for message paging
    private var isLoadingOlder = false
    private var isLoadingNewer = false
    
    private var hasMoreOlder = true
    private var hasMoreNewer = true
    
    private var avatarWarmupRoomID: String?
    
    enum Section: Hashable {
        case main
    }
    
    enum Item: Hashable {
        case message(ChatMessage)
        case dateSeparator(Date)
        case readMarker
    }
    
    enum MessageUpdateType {
        case older
        case newer
        case reload
        case initial
    }
    
    var room: ChatRoom?
    var roomID: String?
    // Firebase Storage downloadURL cache (path -> URL)
    private let storageURLCache = OPStorageURLCache()
    var isRoomSaving: Bool = false
    
    var convertImagesTask: Task<Void, Error>? = nil
    var convertVideosTask: Task<Void, Error>? = nil
    
    private var filteredMessages: [ChatMessage] = []
    private var currentFilteredMessageIndex: Int?
    private var highlightedMessageIDs: Set<String> = []
    private var currentSearchKeyword: String? = nil
    private var hasBoundRoomChange = false
    
    static var currentRoomID: String? = nil
    
    // Ï§ëÎ≥µ Ìò∏Ï∂ú Î∞©ÏßÄÎ•º ÏúÑÌïú ÏµúÍ∑º Ìä∏Î¶¨Í±∞ Ïù∏Îç±Ïä§
    private var minTriggerDistance: Int { return 3 }
    private static var lastTriggeredOlderIndex: Int?
    private static var lastTriggeredNewerIndex: Int?
    
    private var deletionListener: ListenerRegistration?
    
    private var cellSubscriptions: [ObjectIdentifier: Set<AnyCancellable>] = [:]
    
    deinit {
        print("üíß ChatViewController deinit")
        convertImagesTask?.cancel()
        convertVideosTask?.cancel()
        
        deletionListener?.remove()
        deletionListener = nil
    }
    
    private lazy var containerView: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        
        return view
    }()
    
    private lazy var attachmentView: AttachmentView = {
        let view = AttachmentView()
        view.translatesAutoresizingMaskIntoConstraints = false
        
        view.onButtonTapped = { [weak self] identifier in
            guard let self = self else { return }
            self.handleAttachmentButtonTap(identifier: identifier)
        }
        
        return view
    }()
    
    private lazy var chatUIView: ChatUIView = {
        let view = ChatUIView()
        view.isHidden = true
        
        view.onButtonTapped = { [weak self] identifier in
            guard let self = self else { return }
            self.handleAttachmentButtonTap(identifier: identifier)
        }
        
        return view
    }()
    
    private lazy var customNavigationBar: CustomNavigationBarView = {
        let navBar = CustomNavigationBarView()
        navBar.translatesAutoresizingMaskIntoConstraints = false
        
        return navBar
    }()
    
    private lazy var searchUI: ChatSearchUIView = {
        let view = ChatSearchUIView()
        view.isHidden = true
        view.translatesAutoresizingMaskIntoConstraints = false
        
        return view
    }()
    
    private lazy var chatCustomMenu: ChatCustomPopUpMenu = {
        let view = ChatCustomPopUpMenu()
        view.backgroundColor = .black
        view.layer.cornerRadius = 20
        view.translatesAutoresizingMaskIntoConstraints = false
        
        return view
    }()
    private var highlightedCell: ChatMessageCell?
    
    private lazy var notiView: ChatNotiView = {
        let view = ChatNotiView()
        view.translatesAutoresizingMaskIntoConstraints = false
        view.clipsToBounds = true
        view.isHidden = true
        
        return view
    }()
    
    private lazy var replyView: ChatReplyView = {
        let view = ChatReplyView()
        view.translatesAutoresizingMaskIntoConstraints = false
        view.clipsToBounds = true
        view.isHidden = true
        
        return view
    }()
    
    private var settingPanelVC: ChatRoomSettingCollectionView?
    private lazy var dimView: UIView = {
        //        let v = UIControl(frame: .zero)
        let v = UIView()
        v.translatesAutoresizingMaskIntoConstraints = false
        v.backgroundColor = UIColor.black.withAlphaComponent(0.35)
        v.alpha = 0
        
        return v
    }()
    
    // Í≥µÏßÄ Î∞∞ÎÑà (Í≥†Ï†ï/Ï†ëÍ∏∞/ÎßåÎ£å ÏïàÎÇ¥ ÏßÄÏõê)
    private lazy var announcementBanner: AnnouncementBannerView = {
        let v = AnnouncementBannerView()
        v.translatesAutoresizingMaskIntoConstraints = false
        v.isHidden = true
        v.onHeightChange = { [weak self] in
            guard let self = self else { return }
            self.adjustForBannerHeight()
        }
        
        // Long-press on the announcement banner (to show options or toggle expand)
        let bannerLongPress = UILongPressGestureRecognizer(target: self, action: #selector(handleAnnouncementBannerLongPress(_:)))
        bannerLongPress.minimumPressDuration = 0.35
        bannerLongPress.cancelsTouchesInView = true
        v.addGestureRecognizer(bannerLongPress)
        // Ensure the global long press (used for message cells) doesn't steal this interaction
        self.longPressGesture.require(toFail: bannerLongPress)
        return v
    }()
    private var baseTopInsetForBanner: CGFloat?
    
    // Delete confirm overlay
    private var confirmDimView: UIControl?
    private var confirmView: ConfirmView?
    
    private let imagesSubject = CurrentValueSubject<[UIImage], Never>([])
    private var imagesPublishser: AnyPublisher<[UIImage], Never> {
        return imagesSubject.eraseToAnyPublisher()
    }
    
    // Layout Ï†úÏïΩ Ï°∞Í±¥ Ï†ÄÏû•
    private var chatConstraints: [NSLayoutConstraint] = []
    private var chatUIViewBottomConstraint: NSLayoutConstraint?
    private var chatMessageCollectionViewBottomConstraint: NSLayoutConstraint?
    private var joinConsraints: [NSLayoutConstraint] = []
    
    private var interactionController: UIPercentDrivenInteractiveTransition?
    
    private lazy var tapGesture: UITapGestureRecognizer = {
        let gesture = UITapGestureRecognizer(target: self, action: #selector(handleTapGesture))
        gesture.delegate = self
        gesture.cancelsTouchesInView = false
        return gesture
    }()
    
    lazy var longPressGesture: UILongPressGestureRecognizer = {
        let gesture = UILongPressGestureRecognizer(target: self, action: #selector(handleLongPress(_:)))
        gesture.delegate = self
        return gesture
    }()
    
    private var searchUIBottomConstraint: NSLayoutConstraint?
    
    private var scrollTargetIndex: IndexPath?
    
    private var lastContainerViewOriginY: Double = 0
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.definesPresentationContext = true
        
        configureDataSource()
        
        setUpNotifications()
        if isRoomSaving {
            LoadingIndicator.shared.start(on: self)
            chatUIView.isHidden = false
            joinRoomBtn.isHidden = true
        } else {
            LoadingIndicator.shared.stop()
        }
        
        view.addGestureRecognizer(tapGesture)
        view.addGestureRecognizer(longPressGesture)
        
        setupCustomNavigationBar()
        decideJoinUI()
        setupAttachmentView()
        
        setupInitialMessages()
        runInitialProfileFetchOnce()
        
        bindKeyboardPublisher()
        bindSearchEvents()
        
        chatMessageCollectionView.delegate = self
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        guard let room = self.room else { return }
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        isUserInCurrentRoom = false
        
        if let room = self.room {
            SocketIOManager.shared.unsubscribeFromMessages(for: room.ID ?? "")
            
            if ChatViewController.currentRoomID == room.ID {
                ChatViewController.currentRoomID = nil    // ‚úÖ ÎÇòÍ∞à Îïå Ï¥àÍ∏∞Ìôî
            }
        }
        
        stopAllPrefetchers()
        cancellables.removeAll()
        NotificationCenter.default.removeObserver(self)
        
        convertImagesTask?.cancel()
        convertVideosTask?.cancel()
        
        deletionListener?.remove()
        deletionListener = nil
        
        removeReadMarkerIfNeeded()
        
        // Ï∞∏Ïó¨ÌïòÏßÄ ÏïäÏùÄ Î∞©Ïù¥Î©¥ Î°úÏª¨ Î©îÏãúÏßÄ ÏÇ≠Ï†ú Ï≤òÎ¶¨
        if let room = self.room,
           !room.participants.contains(LoginManager.shared.getUserEmail) {
            Task { @MainActor in
                do {
                    try GRDBManager.shared.deleteMessages(inRoom: room.ID ?? "")
                    try GRDBManager.shared.deleteImages(inRoom: room.ID ?? "")
                    print("Ï∞∏Ïó¨ÌïòÏßÄ ÏïäÏùÄ ÏÇ¨Ïö©ÏûêÏùò ÏûÑÏãú Î©îÏãúÏßÄ/Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú ÏôÑÎ£å")
                } catch {
                    print("GRDB Î©îÏãúÏßÄ/Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú Ïã§Ìå®: \(error)")
                }
            }
        }
        
        self.navigationController?.setNavigationBarHidden(false, animated: false)
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
    }
    
//    override func viewDidAppear(_ animated: Bool) {
//        super.viewDidAppear(animated)
//        self.attachInteractiveDismissGesture()
//
//        if let room = self.room {
//            ChatViewController.currentRoomID = room.ID
//        } // ‚úÖ ÌòÑÏû¨ Î∞© ID Ï†ÄÏû•
//    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        self.notiView.layer.cornerRadius = 15
    }
    
    //MARK: Î©îÏãúÏßÄ Í¥ÄÎ†®
    @MainActor
    private func setupInitialMessages() {
        Task {
            LoadingIndicator.shared.start(on: self)
            defer { LoadingIndicator.shared.stop() }
            
            guard let room = self.room else { return }
            let isParticipant = room.participants.contains(LoginManager.shared.getUserEmail)
            // üîé Preview mode for non-participants: fetch & render messages read-only
            if !isParticipant {
                do {
                    // ÏÑúÎ≤ÑÏóêÏÑú ÏµúÏã† Î©îÏãúÏßÄ ÌéòÏù¥ÏßïÏúºÎ°ú Î∂àÎü¨Ïò§Í∏∞ (Î°úÏª¨ DBÏóê Ï†ÄÏû•ÌïòÏßÄ ÏïäÏùå)
                    let previewMessages = try await FirebaseManager.shared.fetchMessagesPaged(for: room, pageSize: 100, reset: true)
                    addMessages(previewMessages, updateType: .initial)

                    // Ïù¥ÎØ∏ÏßÄ/ÎπÑÎîîÏò§ Ïç∏ÎÑ§Ïùº ÌîÑÎ¶¨ÌéòÏπò (ÏÖÄ ÌÉÄÍπÉ Î¶¨Î°úÎìú Ìè¨Ìï®)
                    await self.prefetchThumbnails(for: previewMessages, maxConcurrent: 4)
                    await self.prefetchVideoAssets(for: previewMessages, maxConcurrent: 4)

                    // Ïã§ÏãúÍ∞Ñ Íµ¨ÎèÖ/ÏùΩÏùå Ï≤òÎ¶¨ ÏóÜÏùå (ÎØ∏Ï∞∏Ïó¨ ÏÇ¨Ïö©Ïûê ÎØ∏Î¶¨Î≥¥Í∏∞)
                    self.isInitialLoading = false
                } catch {
                    print("‚ùå ÎØ∏Ï∞∏Ïó¨Ïûê ÎØ∏Î¶¨Î≥¥Í∏∞ Î°úÎìú Ïã§Ìå®:", error)
                }
                return
            }
            
            do {
                // 1. GRDB Î°úÎìú
                let roomID = room.ID ?? ""
                let (localMessages, metas, vmetas) = try await Task.detached(priority: .utility) {
                    let msgs  = try await GRDBManager.shared.fetchRecentMessages(inRoom: roomID, limit: 200)
                    let metas = try await GRDBManager.shared.fetchImageIndex(inRoom: roomID, forMessageIDs: msgs.map { $0.ID })
                    let vmetas = try await GRDBManager.shared.fetchVideoIndex(inRoom: roomID, forMessageIDs: msgs.map { $0.ID })
                    return (msgs, metas, vmetas)
                }.value
                self.lastReadMessageID = localMessages.last?.ID
                

                let grouped = Dictionary(grouping: metas, by: { $0.messageID })
                
                // grouped Î©îÌÉÄÎ•º Í∏∞Î∞òÏúºÎ°ú Ïç∏ÎÑ§Ïùº Ï∫êÏã±
                for (messageID, attachments) in grouped {
                    for att in attachments {
                        let img = try? await FirebaseStorageManager.shared.fetchImageFromStorage(
                            image: att.thumbURL ?? "",
                            location: .RoomImage
                        )
                        if let img = img {
                            await MainActor.run {
                                print(#function, "üì∏ Ïç∏ÎÑ§Ïùº Î°úÎìú ÏÑ±Í≥µ:", att.hash ?? "")
                                self.messageImages[messageID, default: []].append(img)
                            }
                        }
                    }
                }
                // --- Video index: preload thumbnails & warm-up URLs for local messages ---
                let vgrouped = Dictionary(grouping: vmetas, by: { $0.messageID })
                for (messageID, vAtts) in vgrouped {
                    for v in vAtts {
                        
                        print(#function, "üé¨ ÎπÑÎîîÏò§ Î°úÎìú:", v)
                        // 1) Ïç∏ÎÑ§Ïùº ÌîÑÎ¶¨ÌéòÏπò (ÎèôÏòÅÏÉÅÎèÑ Î¶¨Ïä§Ìä∏Ïö©ÏúºÎ°ú Ïù¥ÎØ∏ÏßÄ Ï∫êÏãú/ÌëúÏãú)
                        if let thumbPath = v.thumbURL, !thumbPath.isEmpty {
                            let key = v.hash ?? thumbPath
                            do {
                                let cache = KingfisherManager.shared.cache
                                cache.memoryStorage.config.expiration = .date(Date().addingTimeInterval(60 * 60 * 24 * 30))
                                cache.diskStorage.config.expiration = .days(30)

                                if await KingFisherCacheManager.shared.isCached(key) {
                                    if let img = await KingFisherCacheManager.shared.loadImage(named: key) {
                                        print(#function, "üé¨ ÎπÑÎîîÏò§ Ïç∏ÎÑ§Ïùº Ï∫êÏãúÂëΩ‰∏≠:", key)
                                        await MainActor.run { self.messageImages[messageID, default: []].append(img) }
                                    }
                                } else {
                                    let img = try await FirebaseStorageManager.shared.fetchImageFromStorage(image: thumbPath, location: .RoomImage)
                                    KingFisherCacheManager.shared.storeImage(img, forKey: key)
                                    print(#function, "üé¨ ÎπÑÎîîÏò§ Ïç∏ÎÑ§Ïùº Ï∫êÏãú:", key)
                                    await MainActor.run { self.messageImages[messageID, default: []].append(img) }
                                }
                            } catch {
                                print(#function, "üé¨ ÎπÑÎîîÏò§ Ïç∏ÎÑ§Ïùº Ï∫êÏãú Ïã§Ìå®:", error)
                            }
                        }
                        // 2) ÏõêÎ≥∏ ÎπÑÎîîÏò§ URL warm-up
                        if let origPath = v.originalURL, !origPath.isEmpty {
                            _ = try? await storageURLCache.url(for: origPath)
                        }
                    }
                }

                addMessages(localMessages, updateType: .initial)
                
                // 2. ÏÇ≠Ï†ú ÏÉÅÌÉú ÎèôÍ∏∞Ìôî
                await syncDeletedStates(localMessages: localMessages, room: room)
                
                // 3. Firebase Ï†ÑÏ≤¥ Î©îÏãúÏßÄ Î°úÎìú
                let serverMessages = try await FirebaseManager.shared.fetchMessagesPaged(for: room, pageSize: 300, reset: true)
                try await Task.detached(priority: .utility) {
                    try await GRDBManager.shared.saveChatMessages(serverMessages)
                }.value
                
                addMessages(serverMessages, updateType: .newer)
                
                // Î∞±Í∑∏ÎùºÏö¥Îìú ÌîÑÎ¶¨ÌéòÏπò ÏãúÏûë (Ïù¥ÎØ∏ÏßÄ Ïç∏ÎÑ§Ïùº + ÎπÑÎîîÏò§ Ïç∏ÎÑ§Ïùº/URL warm-up)
                
                
                await self.prefetchThumbnails(for: serverMessages, maxConcurrent: 4)
                await self.prefetchVideoAssets(for: serverMessages, maxConcurrent: 4)
                
                
                isUserInCurrentRoom = true
                bindMessagePublishers()
            } catch {
                print("‚ùå Î©îÏãúÏßÄ Ï¥àÍ∏∞Ìôî Ïã§Ìå®:", error)
            }
            isInitialLoading = false
        }
    }
    
    @MainActor
    private func reloadVisibleMessageIfNeeded(messageID: String) {
        var snapshot = dataSource.snapshot()
        guard let item = snapshot.itemIdentifiers.first(where: { item in
            if case let .message(m) = item { return m.ID == messageID }
            return false
        }) else { return }
        snapshot.reconfigureItems([item])
        dataSource.apply(snapshot, animatingDifferences: false)
    }
    
    private func prefetchThumbnails(for messages: [ChatMessage], maxConcurrent: Int = 4) async {
        guard let roomID = self.room?.ID else { return }
        let imageMessages = messages.filter { $0.attachments.contains { $0.type == .image } }
        
        var index = 0
        while index < imageMessages.count {
            let end = min(index + maxConcurrent, imageMessages.count)
            let slice = Array(imageMessages[index..<end])
            
            await withTaskGroup(of: Void.self) { group in
                for msg in slice {
                    group.addTask { [weak self] in
                        guard let self = self else { return }
                        await self.cacheAttachmentsIfNeeded(for: msg, in: roomID)
                        await MainActor.run {
                            self.reloadVisibleMessageIfNeeded(messageID: msg.ID)
                        }
                    }
                }
                await group.waitForAll()
            }
            index = end
        }
    }
    
    // MARK: - Video asset prefetching
    // Video duration cache (keyed by attachment.hash or pathOriginal)
    private var videoDurationCache: [String: Double] = [:]
    
    private func prefetchVideoAssets(for messages: [ChatMessage], maxConcurrent: Int = 4) async {
        guard let roomID = self.room?.ID else { return }
        let videoMessages = messages.filter { $0.attachments.contains { $0.type == .video } }
        var index = 0
        while index < videoMessages.count {
            let end = min(index + maxConcurrent, videoMessages.count)
            let slice = Array(videoMessages[index..<end])

            await withTaskGroup(of: Void.self) { group in
                for msg in slice {
                    group.addTask { [weak self] in
                        guard let self = self else { return }
                        await self.cacheVideoAssetsIfNeeded(for: msg, in: roomID)
                        await MainActor.run { self.reloadVisibleMessageIfNeeded(messageID: msg.ID) }
                    }
                }
                await group.waitForAll()
            }
            index = end
        }
    }


    @MainActor
    private func syncDeletedStates(localMessages: [ChatMessage], room: ChatRoom) async {
        do {
            // 1) Î°úÏª¨ 200Í∞ú Î©îÏãúÏßÄÏùò ID / ÏÇ≠Ï†úÏÉÅÌÉú Îßµ
            let localIDs = localMessages.map { $0.ID }
            let localDeletionStates = Dictionary(uniqueKeysWithValues: localMessages.map { ($0.ID, $0.isDeleted) })
            
            // 2) ÏÑúÎ≤ÑÏóêÏÑú Ìï¥Îãπ IDÎì§Ïùò ÏÇ≠Ï†ú ÏÉÅÌÉúÎßå Ï°∞Ìöå (chunked IN query)
            let serverMap = try await FirebaseManager.shared.fetchDeletionStates(roomID: room.ID ?? "", messageIDs: localIDs)
            
            // 3) ÏÑúÎ≤ÑÍ∞Ä trueÏù∏Îç∞ Î°úÏª¨ÏùÄ falseÏù∏ IDÎßå ÏóÖÎç∞Ïù¥Ìä∏ ÎåÄÏÉÅ
            let idsToUpdate: [String] = localIDs.filter { (serverMap[$0] ?? false) && ((localDeletionStates[$0] ?? false) == false) }
            guard !idsToUpdate.isEmpty else { return }
            
            let roomID = room.ID ?? ""
            
            // 4) GRDB ÏòÅÏÜçÌôî: ÏõêÎ≥∏ isDeleted + Ìï¥Îãπ ÏõêÎ≥∏ÏùÑ Ï∞∏Ï°∞ÌïòÎäî replyPreview.isDeleted
            try await GRDBManager.shared.updateMessagesIsDeleted(idsToUpdate, isDeleted: true, inRoom: roomID)
            try await GRDBManager.shared.updateReplyPreviewsIsDeleted(referencing: idsToUpdate, isDeleted: true, inRoom: roomID)
            
            // 5) UI Î∞∞Ïπò Î¶¨Î°úÎìú ÏÖãÏóÖ
            //    - ÏõêÎ≥∏: isDeleted=trueÎ°ú ÎßàÌÇπÎêú Î≥µÏÇ¨Î≥∏
            let deletedMessages: [ChatMessage] = localMessages
                .filter { idsToUpdate.contains($0.ID) }
                .map { msg in var copy = msg; copy.isDeleted = true; return copy }
            
            //    - ÎãµÏû•: replyPreview.messageID ‚àà idsToUpdate ‚Üí replyPreview.isDeleted=true Î≥µÏÇ¨Î≥∏
            let affectedReplies: [ChatMessage] = localMessages
                .filter { msg in (msg.replyPreview?.messageID).map(idsToUpdate.contains) ?? false }
                .map { reply in var copy = reply; copy.replyPreview?.isDeleted = true; return copy }
            
            let toReload = deletedMessages + affectedReplies
            if !toReload.isEmpty {
                addMessages(toReload, updateType: .reload)
            }
        } catch {
            print("‚ùå ÏÇ≠Ï†ú ÏÉÅÌÉú ÎèôÍ∏∞Ìôî Ïã§Ìå®:", error)
        }
    }
    
    @MainActor
    private func removeReadMarkerIfNeeded() {
        var snapshot = dataSource.snapshot()
        if let marker = snapshot.itemIdentifiers.first(where: {
            if case .readMarker = $0 { return true }
            return false
        }) {
            snapshot.deleteItems([marker])
            dataSource.apply(snapshot, animatingDifferences: false)
        }
    }
    
    @MainActor
    private func loadOlderMessages(before messageID: String?) async {
        // Note: willDisplay cell logic already handles trigger conditions (scroll position, etc.)
        guard !isLoadingOlder, hasMoreOlder else { return }
        guard let room = self.room else { return }
        
        isLoadingOlder = true
        defer { isLoadingOlder = false }
        
        print(#function, "‚úÖ loading older ÏßÑÌñâ")
        do {
            let roomID = room.ID ?? ""
            
            // 1. GRDBÏóêÏÑú Î®ºÏ†Ä ÏµúÎåÄ 100Í∞ú
            let local = try await Task.detached(priority: .utility) {
                try await GRDBManager.shared.fetchOlderMessages(
                    inRoom: roomID, before: messageID ?? "", limit: 100
                )
            }.value
            var loadedMessages = local
            
            // 2. Î∂ÄÏ°±Î∂ÑÏùÄ ÏÑúÎ≤ÑÏóêÏÑú Ï±ÑÏö∞Í∏∞
            if local.count < 100 {
                let needed = 100 - local.count
                let server = try await FirebaseManager.shared.fetchOlderMessages(
                    for: room,
                    before: messageID ?? "",
                    limit: needed
                )
                
                if server.isEmpty {
                    hasMoreOlder = false   // Îçî Ïù¥ÏÉÅ Ïù¥Ï†Ñ Î©îÏãúÏßÄ ÏóÜÏùå
                } else {
                    try await Task.detached(priority: .utility) {
                        try await GRDBManager.shared.saveChatMessages(server)
                    }.value
                    loadedMessages.append(contentsOf: server)
                }
            }
            
            if loadedMessages.isEmpty {
                hasMoreOlder = false
            } else {
                // Chunk messages into groups of 20 for performance
                let chunkSize = 20
                let total = loadedMessages.count
                for i in stride(from: 0, to: total, by: chunkSize) {
                    let end = min(i + chunkSize, total)
                    let chunk = Array(loadedMessages[i..<end])
                    addMessages(chunk, updateType: .older)
                }
            }
        } catch {
            print("‚ùå loadOlderMessages Ïã§Ìå®:", error)
        }
    }
    
    @MainActor
    private func loadNewerMessagesIfNeeded(after messageID: String?) async {
        // In real-time subscription mode, hasMoreNewer is not needed except when explicitly doing a server fetch.
        // Only guard against isLoadingNewer to allow real-time updates to always flow.
        guard !isLoadingNewer else { return }
        guard let room = self.room else { return }
        
        isLoadingNewer = true
        defer { isLoadingNewer = false }
        
        print(#function, "‚úÖ loading newer ÏßÑÌñâ")
        do {
            // 1. ÏÑúÎ≤ÑÏóêÏÑú lastMessageID Ïù¥ÌõÑ Î©îÏãúÏßÄ Î≥¥Ï∂© (ÏµúÎåÄ 100Í∞ú)
            let server = try await FirebaseManager.shared.fetchMessagesAfter(
                room: room,
                after: messageID ?? "",
                limit: 100
            )
            
            // If server returns empty, simply exit; do not modify any flags.
            if server.isEmpty {
                // No new messages from server; do nothing.
                return
            } else {
                try await Task.detached(priority: .utility) {
                    try await GRDBManager.shared.saveChatMessages(server)
                }.value
                // Chunk messages into groups of 20 for performance
                let chunkSize = 20
                let total = server.count
                for i in stride(from: 0, to: total, by: chunkSize) {
                    let end = min(i + chunkSize, total)
                    let chunk = Array(server[i..<end])
                    addMessages(chunk, updateType: .newer)
                }
            }
        } catch {
            print("‚ùå loadNewerMessagesIfNeeded Ïã§Ìå®:", error)
        }
    }
    
    private func bindMessagePublishers() {
        guard let room = self.room else { return }
        SocketIOManager.shared.subscribeToMessages(for: room.ID ?? "")
            .sink { [weak self] receivedMessage in
                guard let self = self else { return }
                
                Task {
                    await self.handleIncomingMessage(receivedMessage)
                }
            }
            .store(in: &cancellables)
        
        deletionListener = FirebaseManager.shared.listenToDeletedMessages(roomID: room.ID ?? "") { [weak self] deletedMessageID in
            guard let self = self else { return }
            Task { @MainActor in
                let roomID = room.ID ?? ""
                
                // 1) GRDB ÏòÅÏÜçÌôî: ÏõêÎ≥∏ + ÎãµÏû• preview
                do {
                    try await GRDBManager.shared.updateMessagesIsDeleted([deletedMessageID], isDeleted: true, inRoom: roomID)
                    try await GRDBManager.shared.updateReplyPreviewsIsDeleted(referencing: [deletedMessageID], isDeleted: true, inRoom: roomID)
                } catch {
                    print("‚ùå GRDB deletion persistence failed:", error)
                }
                
                // 2) messageMap ÏµúÏã†Ìôî Î∞è Î∞∞Ïπò Î¶¨Î°úÎìú Î™©Î°ù Íµ¨ÏÑ±
                var toReload: [ChatMessage] = []
                
                if var deletedMsg = self.messageMap[deletedMessageID] {
                    deletedMsg.isDeleted = true
                    self.messageMap[deletedMessageID] = deletedMsg
                    toReload.append(deletedMsg)
                } else {
                    print("‚ö†Ô∏è deleted message not in window: \(deletedMessageID)")
                }
                
                let repliesInWindow = self.messageMap.values.filter { $0.replyPreview?.messageID == deletedMessageID }
                for var reply in repliesInWindow {
                    reply.replyPreview?.isDeleted = true
                    self.messageMap[reply.ID] = reply
                    toReload.append(reply)
                }
                
                // 3) UI Î∞òÏòÅ (Ìïú Î≤àÎßå)
                if !toReload.isEmpty {
                    self.addMessages(toReload, updateType: .reload)
                }
            }
        }
    }
    
    /// ÏàòÏã† Î©îÏãúÏßÄÎ•º Ï†ÄÏû• Î∞è UI Î∞òÏòÅ
    @MainActor
    private func handleIncomingMessage(_ message: ChatMessage) async {
        guard let room = self.room else { return }
        
        // Îã§Î•∏ Î∞©ÏóêÏÑú Ïò® Ïù¥Î≤§Ìä∏Î©¥ Î¨¥Ïãú (ÏïàÏ†Ñ Í∞ÄÎìú)
        if message.roomID != room.ID { return }
        
        print("\(message.isFailed ? "Ï†ÑÏÜ° Ïã§Ìå®" : "Ï†ÑÏÜ° ÏÑ±Í≥µ") Î©îÏãúÏßÄ ÏàòÏã†: \(message)")
        
        let roomCopy = room
        do {
            // ÎÇ¥Í∞Ä Î≥¥ÎÇ∏ Ï†ïÏÉÅ Î©îÏãúÏßÄÎßå FirebaseÏóê Í∏∞Î°ù (Ï§ëÎ≥µ Î∞©ÏßÄ)
            if !message.isFailed, message.senderID == LoginManager.shared.getUserEmail {
                try await FirebaseManager.shared.saveMessage(message, roomCopy)
            }
            // Î°úÏª¨ DB Ï†ÄÏû•
            try await GRDBManager.shared.saveChatMessages([message])

            // üé¨ Ïã§ÏãúÍ∞Ñ ÎπÑÎîîÏò§ Î©îÏãúÏßÄ: Ïç∏ÎÑ§Ïùº Ï∫êÏãú + ÏõêÎ≥∏ URL warm-up + Í∞ÄÏãú ÏÖÄ Î¶¨Î°úÎìú
            if message.attachments.contains(where: { $0.type == .video }) {
                await self.cacheVideoAssetsIfNeeded(for: message, in: roomCopy.ID ?? "")
                await MainActor.run { self.reloadVisibleMessageIfNeeded(messageID: message.ID) }
            }

            // Ï≤®Î∂Ä Ï∫êÏã± (Ïç∏ÎÑ§Ïùº/Ïù¥ÎØ∏ÏßÄ Ï∫êÏãú Ï†ÄÏû• Îì±)
            if !message.attachments.isEmpty && message.attachments.first?.type == .image {
                await self.cacheAttachmentsIfNeeded(for: message, in: roomCopy.ID ?? "")
            }

            addMessages([message])
        } catch {
            print("‚ùå Î©îÏãúÏßÄ ÏòÅÏÜçÌôî/Ï∫êÏã± Ïã§Ìå®: \(error)")
        }
    }
    
    //     Ï≤®Î∂ÄÌååÏùº Ï∫êÏã± Ï†ÑÏö©
    private func cacheAttachmentsIfNeeded(for message: ChatMessage, in roomID: String) async {
        guard !message.attachments.isEmpty else { return }
        
        // ÏÇ¨Ï†Ñ Î°úÎìúÌï† Ïç∏ÎÑ§Ïùº Î∞∞Ïó¥(Ï≤®Î∂Ä index ÏàúÏÑú Ïú†ÏßÄ)
        let imageAttachments = message.attachments
            .filter { $0.type == .image }
            .sorted { $0.index < $1.index }
        
        for attachment in imageAttachments {
            // Ïù¥ÎØ∏ÏßÄ ÌÉÄÏûÖ + ÌååÏùºÎ™Ö ÌïÑÏàò
            let key = attachment.hash
            do {
                let cache = KingfisherManager.shared.cache
                cache.memoryStorage.config.expiration = .date(Date().addingTimeInterval(60 * 60 * 24 * 30))
                cache.diskStorage.config.expiration = .days(30)
                
                if await KingFisherCacheManager.shared.isCached(key) {
                    guard let img = await KingFisherCacheManager.shared.loadImage(named: key) else { return }
                    self.messageImages[message.ID, default: []].append(img)
                } else {
                    let img = try await FirebaseStorageManager.shared.fetchImageFromStorage(image: attachment.pathThumb, location: .RoomImage)
                    KingFisherCacheManager.shared.storeImage(img, forKey: key)
                    self.messageImages[message.ID, default: []].append(img)
                }
            } catch {
                print(#function, "Ïù¥ÎØ∏ÏßÄ Ï∫êÏãú Ïã§Ìå®: \(error)")
            }
        }
    }

    // ÎèôÏòÅÏÉÅ Ïç∏ÎÑ§Ïùº Ï∫êÏãú + ÏõêÎ≥∏ URL warm-up (Î°úÏª¨ Ïã§Ìå® Î©îÏãúÏßÄ Ïç∏ÎÑ§ÏùºÎèÑ ÏßÄÏõê)
    private func cacheVideoAssetsIfNeeded(for message: ChatMessage, in roomID: String) async {
        let videoAttachments = message.attachments
            .filter { $0.type == .video }
            .sorted { $0.index < $1.index }

        guard !videoAttachments.isEmpty else { return }

        for attachment in videoAttachments {
            // 1) Ïç∏ÎÑ§Ïùº Ï∫êÏãú
            let thumbPath = attachment.pathThumb
            let key = attachment.hash.isEmpty ? thumbPath : attachment.hash

            if !thumbPath.isEmpty {
                do {
                    let cache = KingfisherManager.shared.cache
                    cache.memoryStorage.config.expiration = .date(Date().addingTimeInterval(60 * 60 * 24 * 30))
                    cache.diskStorage.config.expiration = .days(30)

                    if await KingFisherCacheManager.shared.isCached(key) {
                        if let img = await KingFisherCacheManager.shared.loadImage(named: key) {
                            await MainActor.run { self.messageImages[message.ID, default: []].append(img) }
                        }
                    } else {
                        // Î°úÏª¨ Í≤ΩÎ°ú(Ïã§Ìå® Î©îÏãúÏßÄ)Ïù∏ÏßÄ ÌôïÏù∏ ÌõÑ Î∂ÑÍ∏∞
                        let isLocalFile = thumbPath.hasPrefix("/") || thumbPath.hasPrefix("file://")
                        if isLocalFile {
                            let fileURL = thumbPath.hasPrefix("file://") ? URL(string: thumbPath)! : URL(fileURLWithPath: thumbPath)
                            if let data = try? Data(contentsOf: fileURL),
                               let img = UIImage(data: data) {
                                KingFisherCacheManager.shared.storeImage(img, forKey: key)
                                await MainActor.run { self.messageImages[message.ID, default: []].append(img) }
                            }
                        } else {
                            let img = try await FirebaseStorageManager.shared.fetchImageFromStorage(image: thumbPath, location: .RoomImage)
                            KingFisherCacheManager.shared.storeImage(img, forKey: key)
                            await MainActor.run { self.messageImages[message.ID, default: []].append(img) }
                        }
                    }
                } catch {
                    print(#function, "üé¨ ÎπÑÎîîÏò§ Ïç∏ÎÑ§Ïùº Ï∫êÏãú Ïã§Ìå®:", error)
                }
            }

            // 2) ÏõêÎ≥∏ ÎπÑÎîîÏò§ downloadURL warm-up (ÏÑ±Í≥µ Î©îÏãúÏßÄÏóêÎßå Ï†ÅÏö©)
            let path = attachment.pathOriginal
            if !path.isEmpty, !path.hasPrefix("/") {
                _ = try? await storageURLCache.url(for: path)
                
                // 2) ÏõêÎ≥∏ ÎπÑÎîîÏò§ downloadURL warm-up (ÏÑ±Í≥µ Î©îÏãúÏßÄÏóêÎßå Ï†ÅÏö©)
                let path = attachment.pathOriginal
                if !path.isEmpty, !path.hasPrefix("/") {
                    _ = try? await storageURLCache.url(for: path)
                }

                // 3) Duration cache (avoid re-calculation on revisit/scroll)
                let key = attachment.hash.isEmpty ? attachment.pathOriginal : attachment.hash
                if self.videoDurationCache[key] == nil {
                    if let sec = await self.fetchVideoDuration(for: attachment) {
                        self.videoDurationCache[key] = sec
                    }
                }
            }
            
            
        }
    }
    
    // MARK: - Video duration helpers
    private func formatDuration(_ seconds: Double) -> String {
        if !seconds.isFinite || seconds <= 0 { return "0:00" }
        let total = Int(seconds.rounded())
        let h = total / 3600
        let m = (total % 3600) / 60
        let s = total % 60
        return h > 0 ? String(format: "%d:%02d:%02d", h, m, s)
                     : String(format: "%d:%02d", m, s)
    }

    private func fetchVideoDuration(for attachment: Attachment) async -> Double? {
        let path = attachment.pathOriginal
        guard !path.isEmpty else { return nil }

        // 1) Î°úÏª¨(Ïã§Ìå® Ïû¨ÏãúÎèÑ Îì±)
        if path.hasPrefix("/") || path.hasPrefix("file://") {
            let url = path.hasPrefix("file://") ? URL(string: path)! : URL(fileURLWithPath: path)
            let asset = AVURLAsset(url: url)
            do {
                let cm = try await asset.load(.duration)
                return CMTimeGetSeconds(cm)
            } catch { return nil }
        }

        // 2) ÏõêÍ≤©(Storage) ‚Üí downloadURL resolve ÌõÑ ÏùΩÍ∏∞
        do {
            let remote = try await storageURLCache.url(for: path)
            let asset = AVURLAsset(url: remote)
            let cm = try await asset.load(.duration)
            return CMTimeGetSeconds(cm)
        } catch { return nil }
    }
    
    @MainActor
    private func setupChatUI() {
        // Ïù¥Ï†Ñ ÏÉÅÌÉú(Ï∞∏Ïó¨ Ï†Ñ)Ïóê ÏÑ§Ï†ïÎêú Ï†úÏïΩÏùÑ Ï†ïÎ¶¨ÌïòÍ∏∞ ÏúÑÌï¥, Ï§ëÎ≥µ Ï∂îÍ∞ÄÎ•º Î∞©ÏßÄÌïòÍ≥† Í∏∞Ï°¥ Ï†úÏïΩÍ≥º Ï∂©ÎèåÌïòÏßÄ ÏïäÎèÑÎ°ù Ï†úÍ±∞
        if chatMessageCollectionView.superview != nil {
            chatMessageCollectionView.removeFromSuperview()
        }
        if chatUIView.superview != nil {
            chatUIView.removeFromSuperview()
        }
        
        view.addSubview(chatUIView)
        chatUIView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(chatMessageCollectionView)
        chatMessageCollectionView.translatesAutoresizingMaskIntoConstraints = false
        
        chatUIViewBottomConstraint = chatUIView.bottomAnchor.constraint(equalTo: view.keyboardLayoutGuide.topAnchor)
        NSLayoutConstraint.activate([
            chatUIView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            chatUIView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            chatUIViewBottomConstraint!,
            chatUIView.heightAnchor.constraint(greaterThanOrEqualToConstant: chatUIView.minHeight),
            
            chatMessageCollectionView.heightAnchor.constraint(equalTo: view.heightAnchor),
            chatMessageCollectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            chatMessageCollectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            chatMessageCollectionView.bottomAnchor.constraint(equalTo: chatUIView.topAnchor),
        ])
        
        view.bringSubviewToFront(chatUIView)
        view.bringSubviewToFront(customNavigationBar)
        chatMessageCollectionView.contentInset.top = self.view.safeAreaInsets.top + chatUIView.frame.height + 5
        chatMessageCollectionView.contentInset.bottom = 5
        
        NSLayoutConstraint.deactivate(joinConsraints)
        setupCopyReplyDeleteView()
    }
    
    @MainActor
    private func handleSendButtonTap() {
        guard let message = self.chatUIView.messageTextView.text,
              !message.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty,
              let room = self.room else { return }
        
        self.chatUIView.messageTextView.text = nil
        self.chatUIView.updateHeight()
        self.chatUIView.sendButton.isEnabled = false
        
        let newMessage = ChatMessage(ID: UUID().uuidString, roomID: room.ID ?? "", senderID: LoginManager.shared.getUserEmail, senderNickname: LoginManager.shared.currentUserProfile?.nickname ?? "", msg: message, sentAt: Date(), attachments: [], replyPreview: replyMessage)
        
        Task.detached {
            SocketIOManager.shared.sendMessages(room, newMessage)
        }
        
        if self.replyMessage != nil {
            self.replyMessage = nil
            self.replyView.isHidden = true
        }
    }
    
    //MARK: Ï≤®Î∂ÄÌååÏùº Í¥ÄÎ†®
    @MainActor
    private func hideOrShowOptionMenu() {
        guard let image = self.chatUIView.attachmentButton.imageView?.image else { return }
        if image != UIImage(systemName: "xmark") {
            self.chatUIView.attachmentButton.setImage(UIImage(systemName: "xmark"), for: .normal)
            
            if self.chatUIView.messageTextView.isFirstResponder {
                self.chatUIView.messageTextView.resignFirstResponder()
            }
            
            self.attachmentView.isHidden = false
            self.attachmentView.alpha = 1
            
            self.chatUIViewBottomConstraint?.constant = -(self.attachmentView.frame.height + 10)
        } else {
            self.chatUIView.attachmentButton.setImage(UIImage(systemName: "plus"), for: .normal)
            self.attachmentView.isHidden = true
            self.attachmentView.alpha = 0
            
            self.chatUIViewBottomConstraint?.constant = -10
        }
    }
    
    
    // MARK: - Video playback helper (by Storage path with caching)
    /// storagePath (e.g., "videos/<room>/<message>/video.mp4")Î•º Î∞õÏïÑ
    /// 1) ÎîîÏä§ÌÅ¨ Ï∫êÏãúÏóê ÏûàÏúºÎ©¥ Ï¶âÏãú Î°úÏª¨Î°ú Ïû¨ÏÉù
    /// 2) ÏóÜÏúºÎ©¥ ÏõêÍ≤© URLÎ°ú Î®ºÏ†Ä Ïû¨ÏÉù ÌõÑ Î∞±Í∑∏ÎùºÏö¥ÎìúÎ°ú Ï∫êÏã±
    @MainActor
    func playVideoForStoragePath(_ storagePath: String) async {
        guard !storagePath.isEmpty else { return }
        do {
            if let local = await OPVideoDiskCache.shared.exists(forKey: storagePath) {
                self.playVideo(from: local, storagePath: storagePath)
                return
            }
            let remote = try await storageURLCache.url(for: storagePath)
            self.playVideo(from: remote, storagePath: storagePath)
            Task.detached { _ = try? await OPVideoDiskCache.shared.cache(from: remote, key: storagePath) }
        } catch {
            AlertManager.showAlertNoHandler(
                title: "Ïû¨ÏÉù Ïã§Ìå®",
                message: "ÎèôÏòÅÏÉÅÏùÑ Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.\n\(error.localizedDescription)",
                viewController: self
            )
        }
    }
    
    // ÌîåÎ†àÏù¥Ïñ¥ Ïò§Î≤ÑÎ†àÏù¥Ïóê Ï†ÄÏû• Î≤ÑÌäº Ï∂îÍ∞Ä
    @MainActor
    private func addSaveButton(to playerVC: AVPlayerViewController, localURL: URL?, storagePath: String?) {
        guard let overlay = playerVC.contentOverlayView else { return }

        let button = UIButton(type: .system)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.setImage(UIImage(systemName: "square.and.arrow.down"), for: .normal)
        button.tintColor = .white
        button.backgroundColor = UIColor(white: 0, alpha: 0.5)
        button.layer.cornerRadius = 22
        button.contentEdgeInsets = UIEdgeInsets(top: 10, left: 12, bottom: 10, right: 12)

        button.addAction(UIAction { [weak self] _ in
            guard let self else { return }
            Task { await self.handleSaveVideoTapped(from: playerVC, localURL: localURL, storagePath: storagePath) }
        }, for: .touchUpInside)

        overlay.addSubview(button)
        NSLayoutConstraint.activate([
            button.trailingAnchor.constraint(equalTo: overlay.trailingAnchor, constant: -16),
            button.bottomAnchor.constraint(equalTo: overlay.bottomAnchor, constant: -24),
            button.heightAnchor.constraint(equalToConstant: 44),
            button.widthAnchor.constraint(greaterThanOrEqualToConstant: 44)
        ])
    }
    // Ï†ÄÏû• Î≤ÑÌäº ÌÉ≠ ‚Üí ÏÇ¨ÏßÑ Ïï±Ïóê Ï†ÄÏû•
    @MainActor
    private func handleSaveVideoTapped(from playerVC: AVPlayerViewController, localURL: URL?, storagePath: String?) async {
        let hud = CircularProgressHUD.show(in: playerVC.view, title: nil)
        hud.setProgress(0.15)

        do {
            let fileURL = try await resolveLocalFileURLForSaving(localURL: localURL, storagePath: storagePath) { frac in
                Task { @MainActor in hud.setProgress(0.15 + 0.75 * frac) }
            }

            let granted = await requestPhotoAddPermission()
            guard granted else {
                hud.dismiss()
                AlertManager.showAlertNoHandler(
                    title: "Ï†ÄÏû• Î∂àÍ∞Ä",
                    message: "ÏÇ¨ÏßÑ Ïï± Ï†ÄÏû• Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§. ÏÑ§Ï†ï > Í∞úÏù∏Ï†ïÎ≥¥Î≥¥Ìò∏ÏóêÏÑú Í∂åÌïúÏùÑ ÌóàÏö©Ìï¥ Ï£ºÏÑ∏Ïöî.",
                    viewController: self
                )
                return
            }

            try await saveVideoToPhotos(fileURL: fileURL)
            hud.setProgress(1.0); hud.dismiss()
            AlertManager.showAlertNoHandler(
                title: "Ï†ÄÏû• ÏôÑÎ£å",
                message: "ÏÇ¨ÏßÑ Ïï±Ïóê ÎèôÏòÅÏÉÅÏùÑ Ï†ÄÏû•ÌñàÏäµÎãàÎã§.",
                viewController: self
            )
        } catch {
            hud.dismiss()
            AlertManager.showAlertNoHandler(
                title: "Ï†ÄÏû• Ïã§Ìå®",
                message: error.localizedDescription,
                viewController: self
            )
        }
    }
    
    private func requestPhotoAddPermission() async -> Bool {
        if #available(iOS 14, *) {
            let s = PHPhotoLibrary.authorizationStatus(for: .addOnly)
            if s == .authorized || s == .limited { return true }
            let ns = await PHPhotoLibrary.requestAuthorization(for: .addOnly)
            return ns == .authorized || ns == .limited
        } else {
            let s = PHPhotoLibrary.authorizationStatus()
            if s == .authorized { return true }
            let ns = await withCheckedContinuation { (cont: CheckedContinuation<PHAuthorizationStatus, Never>) in
                PHPhotoLibrary.requestAuthorization { cont.resume(returning: $0) }
            }
            return ns == .authorized
        }
    }

    private func saveVideoToPhotos(fileURL: URL) async throws {
        try await withCheckedThrowingContinuation { (cont: CheckedContinuation<Void, Error>) in
            PHPhotoLibrary.shared().performChanges({
                PHAssetCreationRequest.creationRequestForAssetFromVideo(atFileURL: fileURL)
            }) { ok, err in
                if let err = err {
                    cont.resume(throwing: err)
                    return
                }
                if ok {
                    cont.resume(returning: ())
                } else {
                    cont.resume(throwing: NSError(domain: "SaveVideo", code: -1,
                                                  userInfo: [NSLocalizedDescriptionKey: "Unknown error while saving video"]))
                }
            }
        }
    }

    /// Ï†ÄÏû•Ïö© Î°úÏª¨ ÌååÏùº ÌôïÎ≥¥:
    /// - localURLÏù¥ file://Ïù¥Î©¥ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
    /// - storagePath Ï∫êÏãúÍ∞Ä ÏûàÏúºÎ©¥ Ï∫êÏãú ÌååÏùº ÏÇ¨Ïö©
    /// - ÏïÑÎãàÎ©¥ downloadURLÎ°ú ÎÇ¥Î†§Î∞õÏïÑ ÏûÑÏãúÌååÏùºÎ°ú Ï†ÄÏû•
    private func resolveLocalFileURLForSaving(localURL: URL?, storagePath: String?, onProgress: @escaping (Double)->Void) async throws -> URL {
        if let localURL, localURL.isFileURL { return localURL }

        if let storagePath,
           let cached = await OPVideoDiskCache.shared.exists(forKey: storagePath) {
            return cached
        }

        if let storagePath {
            let remote = try await storageURLCache.url(for: storagePath)
            return try await downloadToTemporaryFile(from: remote, onProgress: onProgress)
        }

        if let remote = localURL, (remote.scheme?.hasPrefix("http") == true) {
            return try await downloadToTemporaryFile(from: remote, onProgress: onProgress)
        }

        throw NSError(domain: "SaveVideo", code: -2,
                      userInfo: [NSLocalizedDescriptionKey: "Ï†ÄÏû•Ìï† ÌååÏùº Í≤ΩÎ°úÎ•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§."])
    }

    private func downloadToTemporaryFile(from remote: URL, onProgress: @escaping (Double)->Void) async throws -> URL {
        let tmp = FileManager.default.temporaryDirectory.appendingPathComponent("save_\(UUID().uuidString).mp4")
        let (data, _) = try await URLSession.shared.data(from: remote)
        try data.write(to: tmp, options: .atomic)
        onProgress(1.0)
        return tmp
    }
    
    @MainActor
    private func playVideo(from url: URL, storagePath: String? = nil) {
        let asset = AVURLAsset(url: url)
        let item  = AVPlayerItem(asset: asset)
        let player = AVPlayer(playerItem: item)
        let vc = AVPlayerViewController()
        vc.player = player

        present(vc, animated: true) { [weak self] in
            player.play()
            self?.addSaveButton(to: vc, localURL: url, storagePath: storagePath)
        }
    }
    
    private func openCamera() {
        if UIImagePickerController.isSourceTypeAvailable(.camera) {
            let imagePicker = UIImagePickerController()
            imagePicker.delegate = self
            imagePicker.allowsEditing = true
            imagePicker.sourceType = .camera
            
            present(imagePicker, animated: true, completion: nil)
        }
    }
    
    private func openPHPicker() {
        var configuration = PHPickerConfiguration()
        configuration.filter = .any(of: [.images, .videos])
        configuration.selectionLimit = 0
        configuration.selection = .ordered
        configuration.preferredAssetRepresentationMode = .current
        
        let picker = PHPickerViewController(configuration: configuration)
        picker.delegate = self
        present(picker, animated: true)
    }
    
    private func setupAttachmentView() {
        DispatchQueue.main.async {
            self.view.addSubview(self.attachmentView)
            
            NSLayoutConstraint.activate([
                self.attachmentView.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor),
                self.attachmentView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor, constant: 20),
                self.attachmentView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor, constant: -20),
                self.attachmentView.heightAnchor.constraint(equalToConstant: 100),
            ])
        }
    }
    
    @MainActor
    private func handleAttachmentButtonTap(identifier: String) {
        switch identifier {
        case "photo":
            print("Photo btn tapped!")
            self.hideOrShowOptionMenu()
            self.openPHPicker()
            
        case "camera":
            print("Camera btn tapped!")
            self.hideOrShowOptionMenu()
            self.openCamera()
            
        case "attachmentButton":
            self.hideOrShowOptionMenu()
            
        case "sendButton":
            self.handleSendButtonTap()
        default:
            return
        }
    }
    
    // MARK: Î∞© Í¥ÄÎ†®
    // Prevent duplicated join flow / duplicated loading HUDs
    private var isJoiningRoom: Bool = false
    private func setUpNotifications() {
        // Î∞© Ï†ÄÏû• Í¥ÄÎ†®
        NotificationCenter.default.addObserver(self, selector: #selector(handleRoomSaveCompleted), name: .roomSavedComplete, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(handleRoomSaveFailed), name: .roomSaveFailed, object: nil)
    }
    
    @MainActor
    private func bindRoomChangePublisher() {
        if hasBoundRoomChange { return }
        hasBoundRoomChange = true
        
        // Ïã§ÏãúÍ∞Ñ Î∞© ÏóÖÎç∞Ïù¥Ìä∏ Í¥ÄÎ†®
        FirebaseManager.shared.roomChangePublisher
            .receive(on: DispatchQueue.main)
            .sink { [weak self] updatedRoom in
                guard let self = self else { return }
                let previousRoom = self.room
                self.room = updatedRoom
                print(#function, "ChatViewController.swift Î∞© Ï†ïÎ≥¥ Î≥ÄÍ≤Ω: \(updatedRoom)")
                Task { @MainActor in
                    await self.applyRoomDiffs(old: previousRoom, new: updatedRoom)
                }
            }
            .store(in: &cancellables)
    }
    
    /// Î∞© Ï†ïÎ≥¥(old ‚Üí new) Î≥ÄÍ≤ΩÏ†êÏùÑ ÎπÑÍµêÌïòÍ≥† ÌïÑÏöîÌïú UI/ÎèôÍ∏∞ÌôîÎßå ÏàòÌñâ
    @MainActor
    private func applyRoomDiffs(old: ChatRoom?, new: ChatRoom) async {
        // ÏµúÏ¥à Î∞îÏù∏Îî© ÎòêÎäî Ïù¥Ï†Ñ Ï†ïÎ≥¥Í∞Ä ÏóÜÏùÑ Îïå: Ï†ÑÏ≤¥ Ï¥àÍ∏∞Ìôî ÎäêÎÇåÏúºÎ°ú Ï≤òÎ¶¨
        guard let old = old else {
            updateNavigationTitle(with: new)
            runInitialProfileFetchOnce()
            setupAnnouncementBannerIfNeeded()
            updateAnnouncementBanner(with: new.activeAnnouncement)
            return
        }
        
        // 1) ÌÉÄÏù¥ÌãÄ/Ï∞∏Ïó¨Ïûê Ïàò Î≥ÄÍ≤Ω Ïãú ÏÉÅÎã® ÎÑ§ÎπÑÎ∞îÎßå Í∞±Ïã†
        if old.roomName != new.roomName || old.participants.count != new.participants.count {
            updateNavigationTitle(with: new)
        }
        
        // 2) Ï∞∏Ïó¨Ïûê Î≥ÄÍ≤Ω Ïãú, ÏÉàÎ°ú Ï∂îÍ∞ÄÎêú ÏÇ¨Ïö©ÏûêÎßå ÎèôÍ∏∞Ìôî(ÏµúÏÜåÌôî)
        let oldSet = Set(old.participants)
        let newSet = Set(new.participants)
        let joined = Array(newSet.subtracting(oldSet))
        if !joined.isEmpty {
            runInitialProfileFetchOnce()
        }
        
        // 3) Í≥µÏßÄ Î≥ÄÍ≤Ω Í∞êÏßÄ: ID/ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÍ∞Å/Î≥∏Î¨∏/ÏûëÏÑ±Ïûê Ï§ë ÌïòÎÇòÎùºÎèÑ Îã¨ÎùºÏßÄÎ©¥ Î∞∞ÎÑà Í∞±Ïã†
        let announcementChanged: Bool = {
            if old.activeAnnouncementID != new.activeAnnouncementID { return true }
            if old.announcementUpdatedAt != new.announcementUpdatedAt { return true }
            if old.activeAnnouncement?.text != new.activeAnnouncement?.text { return true }
            if old.activeAnnouncement?.authorID != new.activeAnnouncement?.authorID { return true }
            return false
        }()
        if announcementChanged {
            setupAnnouncementBannerIfNeeded()
            updateAnnouncementBanner(with: new.activeAnnouncement)
        }
    }
    
    @objc private func handleRoomSaveCompleted(notification: Notification) {
        guard let savedRoom = notification.userInfo?["room"] as? ChatRoom else { return }
        self.room = savedRoom
        Task { FirebaseManager.shared.startListenRoomDoc(roomID: savedRoom.ID ?? "") }
        
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            self.updateNavigationTitle(with: savedRoom)
            LoadingIndicator.shared.stop()
            self.view.isUserInteractionEnabled = true
            
            // Ïù¥ÎØ∏ Ïó∞Í≤∞Îêú Í≤ΩÏö∞ÏóêÎäî room ÏÉùÏÑ±Í≥º joinÎßå ÏàòÌñâ
            if SocketIOManager.shared.isConnected {
                SocketIOManager.shared.createRoom(savedRoom.ID ?? "")
                SocketIOManager.shared.joinRoom(savedRoom.ID ?? "")
            }
        }
    }
    
    @objc private func handleRoomSaveFailed(notification: Notification) {
        LoadingIndicator.shared.stop()
        
        guard let error = notification.userInfo?["error"] as? RoomCreationError else { return }
        showAlert(error: error)
    }
    
    //MARK: ÌîÑÎ°úÌïÑ Í¥ÄÎ†®
    // Î∞© Í¥ÄÎ†® ÌîÑÎ°úÌçºÌã∞ Í∑ºÏ≤òÏóê Ï∂îÍ∞Ä
    private var avatarWindowAnchorIndex: Int? = nil  // ÎßàÏßÄÎßâ ÏïµÏª§
    private let avatarWindowMinStep: Int = 30        // Ïù¥ Í∞í ÎØ∏Îßå Ïù¥ÎèôÏùÄ Ïä§ÌÇµ
    private let avatarLookbackMsgs: Int = 100        // Ïù¥Ï†Ñ 100
    private let avatarLookaheadMsgs: Int = 100       // Ïù¥ÌõÑ 100
    private let avatarMaxUniqueSenders: Int = 60     // Í≥†Ïú† Î∞úÏã†Ïûê ÏÉÅÌïú
    
    private func runInitialProfileFetchOnce() {
        guard let rid = room?.ID, !rid.isEmpty else { return }
        if avatarWarmupRoomID == rid { return }
        avatarWarmupRoomID = rid
        initialProfileFetching()
    }
    
    private func initialProfileFetching() {
        guard let room = room else { return }

        // Ï∞∏Ïó¨Ïûê Ïù¥Î©îÏùº Î™©Î°ù
        let emails: [String] = room.participants
        let roomID = room.ID ?? ""

        Task.detached { [weak self] in
            guard let self = self else { return }
            do {
                // 1) ÌòÑÏû¨ Î°úÏª¨Ïóê Ïù¥ Î∞©Ïùò ÏÇ¨Ïö©Ïûê(Í≤ΩÎüâ LocalUser)Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
                var localUsers = try GRDBManager.shared.fetchLocalUsers(inRoom: roomID)
                print(#function, "‚úÖ Î∞©Ïóê Ï∞∏Ïó¨Ìïú ÏÇ¨ÎûåÎì§Ïùò LocalUser ÎèôÍ∏∞Ìôî ÏÑ±Í≥µ: ", localUsers)

                if localUsers.isEmpty {
                    // 1-a) Î∞© ÏµúÏ¥à ÏßÑÏûÖ: ÏÑúÎ≤ÑÏóêÏÑú Ï†ÑÏ≤¥ ÌîÑÎ°úÌïÑ Î°úÎìú ‚Üí LocalUser upsert + RoomMember Ï∂îÍ∞Ä
                    let serverProfiles = try await FirebaseManager.shared.fetchUserProfiles(emails: emails)
                    print(#function, "‚úÖ Î∞©Ïóê Ï∞∏Ïó¨Ìïú ÏÇ¨ÎûåÎì§Ïùò ÌîÑÎ°úÌïÑ ÎèôÍ∏∞Ìôî ÏÑ±Í≥µ: ", serverProfiles)

                    for p in serverProfiles {
                        let email = p.email ?? ""
                        let nickname = p.nickname ?? ""
                        let imagePath = p.profileImagePath
                        // LocalUser upsert
                        _ = try GRDBManager.shared.upsertLocalUser(email: email, nickname: nickname, profileImagePath: imagePath)
                        // RoomMember Ïó∞Í≤∞
                        try GRDBManager.shared.addLocalUser(email, toRoom: roomID)
                    }

                    // Î°úÏª¨ Ïû¨Ï°∞Ìöå
                    localUsers = try GRDBManager.shared.fetchLocalUsers(inRoom: roomID)
                } else {
                    // 1-b) ÏùºÎ∂ÄÎßå ÏûàÎäî Í≤ΩÏö∞: ÎØ∏Ïã± ÏÇ¨Ïö©ÏûêÎßå Ï±ÑÏõÄ + Î©§Î≤ÑÏã≠ Î≥¥Ï†ï
                    let localSet = Set(localUsers.map { $0.email })
                    let missing = emails.filter { !localSet.contains($0) }

                    if !missing.isEmpty {
                        let serverProfiles = try await FirebaseManager.shared.fetchUserProfiles(emails: missing)
                        for p in serverProfiles {
                            let email = p.email ?? ""
                            let nickname = p.nickname ?? ""
                            let imagePath = p.profileImagePath
                            _ = try GRDBManager.shared.upsertLocalUser(email: email, nickname: nickname, profileImagePath: imagePath)
                            try GRDBManager.shared.addLocalUser(email, toRoom: roomID)
                        }
                        localUsers = try GRDBManager.shared.fetchLocalUsers(inRoom: roomID)
                    }

                    // Î∞© Î©§Î≤ÑÏã≠ ÎàÑÎùΩ Î≥¥Ï†ï (RoomMemberÏóê ÏóÜÏúºÎ©¥ Ï∂îÍ∞Ä)
                    let existingMembership = try GRDBManager.shared.userEmails(in: roomID)
                    let existingSet = Set(existingMembership)
                    let toAdd = emails.filter { !existingSet.contains($0) }
                    for e in toAdd { try GRDBManager.shared.addLocalUser(e, toRoom: roomID) }
                }

                // 2) Í∞ÄÏãúÏòÅÏó≠ Î∞úÏã†Ïûê Ïö∞ÏÑ† ÌîÑÎ¶¨Ìå®Ïπò + Top-50
                // 2-a) Í∞ÄÏãúÏòÅÏó≠(ÌòÑÏû¨ Î≥¥Ïù¥Îäî ÏÖÄ)Ïùò Î∞úÏã†Ïûê ÏïÑÎ∞îÌÉÄ ÌîÑÎ¶¨Ìå®Ïπò
                let visibleEmails: [String] = await MainActor.run { self.visibleSenderEmails(limit: 30) }
                if !visibleEmails.isEmpty {
                    var map = Dictionary(uniqueKeysWithValues: localUsers.map { ($0.email, $0) })
                    let visibleSet = Set(visibleEmails)
                    let missing = Array(visibleSet.subtracting(map.keys))
                    if !missing.isEmpty {
                        // ÏÑúÎ≤ÑÏóêÏÑú ÎØ∏Ïã± ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Î∞õÏïÑ Î°úÏª¨ upsert (RoomMemberÎäî Ï∂îÍ∞ÄÌïòÏßÄ ÏïäÏùå)
                        let serverProfiles = try await FirebaseManager.shared.fetchUserProfiles(emails: missing)
                        for p in serverProfiles {
                            let email = p.email ?? ""
                            let nickname = p.nickname ?? ""
                            let imagePath = p.profileImagePath
                            let upserted = try GRDBManager.shared.upsertLocalUser(email: email, nickname: nickname, profileImagePath: imagePath)
                            map[email] = upserted
                        }
                    }
                    let visibleUsers = visibleEmails.compactMap { map[$0] }
                    await self.prefetchProfileAvatars(for: visibleUsers, topCount: visibleUsers.count)
                }

                // 2-b) ÎãâÎÑ§ÏûÑ ASC Í∏∞Ï§Ä Top-50 ÏïÑÎ∞îÌÉÄ ÌîÑÎ¶¨Ìå®Ïπò (ÎîîÏä§ÌÅ¨ Ï∫êÏãúÏóê Îç∞ÏõåÎëêÍ∏∞)
                await self.prefetchProfileAvatars(for: localUsers, topCount: 50)
            } catch {
                print("‚ùå Ï¥àÍ∏∞ ÌîÑÎ°úÌïÑ ÏÑ§Ï†ï Ïã§Ìå®:", error)
            }
        }
    }
    /// ÌòÑÏû¨ ÌôîÎ©¥Ïóê Î≥¥Ïù¥Îäî Î©îÏãúÏßÄ ÏÖÄÏùò Î∞úÏã†Ïûê Ïù¥Î©îÏùº Î™©Î°ù(Ï§ëÎ≥µ Ï†úÍ±∞, ÏµúÎåÄ limit)
    @MainActor
    private func visibleSenderEmails(limit: Int = 30) -> [String] {
        let paths = chatMessageCollectionView.indexPathsForVisibleItems
        guard !paths.isEmpty else { return [] }
        var seen = Set<String>()
        var result: [String] = []
        for ip in paths {
            if let item = dataSource.itemIdentifier(for: ip), case let .message(m) = item {
                let email = m.senderID
                if !email.isEmpty && !seen.contains(email) {
                    seen.insert(email)
                    result.append(email)
                    if result.count >= limit { break }
                }
            }
        }
        return result
    }
    
    @MainActor
    private func senderEmailsAround(index anchor: Int,
                                    lookback: Int = 100,
                                    lookahead: Int = 100,
                                    cap: Int = 60) -> [String] {
        let snapshot = dataSource.snapshot()
        let items = snapshot.itemIdentifiers
        guard !items.isEmpty else { return [] }

        let total = items.count
        let start = max(0, min(anchor, total - 1) - lookback)
        let end   = min(total, anchor + 1 + lookahead)

        var seen = Set<String>(), result: [String] = []
        var i = start
        while i < end {
            if case let .message(m) = items[i] {
                let email = m.senderID
                if !email.isEmpty && seen.insert(email).inserted {
                    result.append(email)
                    if result.count >= cap { break }
                }
            }
            i += 1
        }
        return result
    }
    
    private func prefetchAvatarsAroundDisplayIndex(_ displayIndex: Int) {
        // ÎÑàÎ¨¥ Ï¥òÏ¥òÌïú Ìò∏Ï∂ú Î∞©ÏßÄ
        if let last = avatarWindowAnchorIndex, abs(last - displayIndex) < avatarWindowMinStep { return }
        avatarWindowAnchorIndex = displayIndex
        guard let roomID = room?.ID, !roomID.isEmpty else { return }

        Task.detached { [weak self] in
            guard let self = self else { return }
            do {
                // 1) UI Ïä§Î†àÎìúÏóêÏÑú Ïä§ÎÉÖÏÉ∑ ÏùΩÍ∏∞ ‚Üí Í≥†Ïú† Î∞úÏã†Ïûê ÏßëÌï©
                let emails: [String] = await MainActor.run {
                    self.senderEmailsAround(index: displayIndex,
                                            lookback: self.avatarLookbackMsgs,
                                            lookahead: self.avatarLookaheadMsgs,
                                            cap: self.avatarMaxUniqueSenders)
                }
                guard !emails.isEmpty else { return }

                // 2) Î°úÏª¨ LocalUser Îßµ
                var localUsers = try GRDBManager.shared.fetchLocalUsers(inRoom: roomID)
                var map = Dictionary(uniqueKeysWithValues: localUsers.map { ($0.email, $0) })

                // 3) Î°úÏª¨Ïóê ÏóÜÎäî ÏÇ¨Ïö©ÏûêÎßå ÏÑúÎ≤ÑÏóêÏÑú Î≥¥Ï∂©(upsert) ‚Äî RoomMemberÎäî Ï∂îÍ∞Ä X
                let missing = emails.filter { map[$0] == nil }
                if !missing.isEmpty {
                    let serverProfiles = try await FirebaseManager.shared.fetchUserProfiles(emails: missing)
                    for p in serverProfiles {
                        let email = p.email ?? ""; if email.isEmpty { continue }
                        let nickname = p.nickname ?? ""
                        let imagePath = p.profileImagePath
                        let upserted = try GRDBManager.shared.upsertLocalUser(email: email,
                                                                              nickname: nickname,
                                                                              profileImagePath: imagePath)
                        map[email] = upserted
                    }
                }

                // 4) Ïù¥Î©îÏùº ÏàúÏÑúÎåÄÎ°ú LocalUser Î∞∞Ïó¥ Íµ¨ÏÑ± ‚Üí ÌîÑÎ¶¨Ìå®Ïπò
                let targets = emails.compactMap { map[$0] }
                guard !targets.isEmpty else { return }
                await self.prefetchProfileAvatars(for: targets, topCount: targets.count)
            } catch {
                print("‚ùå ÏïÑÎ∞îÌÉÄ ÏúàÎèÑÏö∞ ÌîÑÎ¶¨Ìå®Ïπò Ïã§Ìå®:", error)
            }
        }
    }

    /// ÎãâÎÑ§ÏûÑ Ï†ïÎ†¨ Í∏∞Ï§Ä Top-N ÏÇ¨Ïö©Ïûê ÏïÑÎ∞îÌÉÄÎ•º ÏÑ†Ìñâ Ï∫êÏãú (ÎîîÏä§ÌÅ¨)
    private func prefetchProfileAvatars(for users: [LocalUser], topCount: Int = 50) async {
        guard !users.isEmpty else { return }

        // 1) ÎãâÎÑ§ÏûÑ Ïò§Î¶ÑÏ∞®Ïàú Ï†ïÎ†¨ ‚Üí Top-N
        let sorted = users.sorted { $0.nickname.localizedCaseInsensitiveCompare($1.nickname) == .orderedAscending }
        let top = Array(sorted.prefix(min(topCount, sorted.count)))

        // 2) Ïù¥ÎØ∏ÏßÄ ÌÇ§Îäî profileImagePath Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö© (Firebase Storage path)
        await withTaskGroup(of: Void.self) { group in
            for u in top {
                guard let path = u.profileImagePath, !path.isEmpty else { continue }
                let key = path
                group.addTask { [weak self] in
                    guard let self = self else { return }
                    do {
                        // Ïù¥ÎØ∏ Ï∫êÏãúÎêòÏñ¥ ÏûàÏúºÎ©¥ Ïä§ÌÇµ
                        if await KingFisherCacheManager.shared.isCached(key) { return }

                        // ÏÑúÎ™ÖÎêú downloadURL ÌôïÎ≥¥ ÌõÑ ÏõêÎ≥∏ Îç∞Ïù¥ÌÑ∞Î•º Î∞õÏïÑ Ï∫êÏãúÏóê Ï†ÄÏû•
                        let url = try await self.storageURLCache.url(for: path)
                        let (data, _) = try await URLSession.shared.data(from: url)
                        if let img = UIImage(data: data) {
                            KingFisherCacheManager.shared.storeImage(img, forKey: key)
                        }
                    } catch {
                        print("üë§ ÏïÑÎ∞îÌÉÄ ÌîÑÎ¶¨Ìå®Ïπò Ïã§Ìå® (\(u.email)):", error)
                    }
                }
            }
            await group.waitForAll()
        }
    }
    
    
    // MARK: Ï¥àÍ∏∞ UI ÏÑ§Ï†ï Í¥ÄÎ†®
    @MainActor
    private func decideJoinUI() {
        guard let room = room else { return }
        
        Task {
            if room.participants.contains(LoginManager.shared.getUserEmail) {
                setupChatUI()
                chatUIView.isHidden = false
                joinRoomBtn.isHidden = true
                self.bindRoomChangePublisher()
//                FirebaseManager.shared.startListenRoomDoc(roomID: room.ID ?? "")
                runInitialProfileFetchOnce()
                self.setupAnnouncementBannerIfNeeded()
                self.updateAnnouncementBanner(with: room.activeAnnouncement)
            } else {
                setJoinRoombtn()
                joinRoomBtn.isHidden = false
                chatUIView.isHidden = true
                self.customNavigationBar.rightStack.isUserInteractionEnabled = false
            }
            
            updateNavigationTitle(with: room)
        }
    }
    
    private func setJoinRoombtn() {
        self.joinRoomBtn.clipsToBounds = true
        self.joinRoomBtn.layer.cornerRadius = 20
        self.joinRoomBtn.backgroundColor = UIColor(white: 0.1, alpha: 0.05)
        joinRoomBtn.translatesAutoresizingMaskIntoConstraints = false
        
        if chatMessageCollectionView.superview == nil {
            view.addSubview(chatMessageCollectionView)
            chatMessageCollectionView.translatesAutoresizingMaskIntoConstraints = false
            
            NSLayoutConstraint.activate([
                chatMessageCollectionView.topAnchor.constraint(equalTo: customNavigationBar.bottomAnchor),
                chatMessageCollectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
                chatMessageCollectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            ])
        }
        
        NSLayoutConstraint.deactivate(chatConstraints)
        
        joinConsraints = [
            chatMessageCollectionView.bottomAnchor.constraint(equalTo: joinRoomBtn.topAnchor)
        ]
        NSLayoutConstraint.activate(joinConsraints)
    }
    
    @MainActor
    @IBAction func joinRoomBtnTapped(_ sender: UIButton) {
        guard let room = self.room else { return }
        // Prevent double taps / duplicated HUDs
        guard !isJoiningRoom else { return }
        isJoiningRoom = true
        // Ensure only one loading indicator is visible
        LoadingIndicator.shared.stop()   // clear any residual
        LoadingIndicator.shared.start(on: self)  // start a single HUD for this join flow

        joinRoomBtn.isHidden = true
        customNavigationBar.rightStack.isUserInteractionEnabled = true

        NSLayoutConstraint.deactivate(joinConsraints)
        joinConsraints.removeAll()
        if chatMessageCollectionView.superview != nil {
            chatMessageCollectionView.removeFromSuperview()
        }

        Task {
            do {
                // 1. ÏÜåÏºì Ïó∞Í≤∞ (async/await Î≤ÑÏ†Ñ)
                if !SocketIOManager.shared.isConnected {
                    try await SocketIOManager.shared.establishConnection()
                    SocketIOManager.shared.joinRoom(room.ID ?? "")
                    SocketIOManager.shared.listenToNewParticipant()
                }

                // 2. FirebaseÏóê Ï∞∏Ïó¨Ïûê Îì±Î°ù
                try await FirebaseManager.shared.add_room_participant(room: room)

                // 3. ÏµúÏã† room Ï†ïÎ≥¥ fetch
                let updatedRoom = try await FirebaseManager.shared.fetchRoomInfo(room: room)
                self.room = updatedRoom

                // 4. ÌîÑÎ°úÌïÑ ÎèôÍ∏∞Ìôî

                // 5. UI ÏóÖÎç∞Ïù¥Ìä∏
                await MainActor.run {
                    self.setupChatUI()
                    self.chatUIView.isHidden = false
                    self.chatMessageCollectionView.isHidden = false
                    self.bindRoomChangePublisher()
                    FirebaseManager.shared.startListenRoomDoc(roomID: updatedRoom.ID ?? "")
                    runInitialProfileFetchOnce()
                    self.view.layoutIfNeeded()
                }
                LoadingIndicator.shared.stop()
                self.isJoiningRoom = false
                print(#function, "‚úÖ Î∞© Ï∞∏Ïó¨ ÏÑ±Í≥µ, UI ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å")

            } catch {
                print("‚ùå Î∞© Ï∞∏Ïó¨ Ï≤òÎ¶¨ Ïã§Ìå®: \(error)")
                await MainActor.run {
                    self.joinRoomBtn.isHidden = false
                    self.customNavigationBar.rightStack.isUserInteractionEnabled = false
                    LoadingIndicator.shared.stop()
                    self.isJoiningRoom = false
                }
            }
        }
    }
    
    //MARK: Ïª§Ïä§ÌÖÄ ÎÇ¥ÎπÑÍ≤åÏù¥ÏÖò Î∞î
    @MainActor
    @objc private func backButtonTapped() {
        // ‚úÖ ÌëúÏ§Ä ÎÑ§ÎπÑÍ≤åÏù¥ÏÖòÏúºÎ°úÎßå ÎêòÎèåÏïÑÍ∞ÄÍ∏∞ (root ÍµêÏ≤¥ Í∏àÏßÄ)
        // 1) ÎÇ¥ÎπÑÍ≤åÏù¥ÏÖò Ïä§ÌÉù Ïö∞ÏÑ†
        if let nav = self.navigationController {
            // Î∞îÎ°ú ÏïÑÎûòÍ∞Ä RoomCreateViewControllerÏù¥Î©¥, Í∑∏ Ïù¥Ï†Ñ ÌôîÎ©¥(ÎòêÎäî Î£®Ìä∏)Î°ú Î≥µÍ∑Ä
            if let idx = nav.viewControllers.firstIndex(of: self), idx > 0, nav.viewControllers[idx-1] is RoomCreateViewController {
                if idx >= 2 {
                    let target = nav.viewControllers[idx-2]
                    nav.popToViewController(target, animated: true)
                } else {
                    nav.popToRootViewController(animated: true)
                }
            } else {
                nav.popViewController(animated: true)
            }
            return
        }

        // 2) Î™®Îã¨ ÌëúÏãúÎêú Í≤ΩÏö∞ÏóêÎäî Îã®Ïàú dismiss
        if self.presentingViewController != nil {
            self.dismiss(animated: true)
            return
        }

        // 3) Ìè¥Î∞±: ÌÉ≠Î∞î ÏïÑÎûòÏùò ÎÇ¥ÎπÑÍ≤åÏù¥ÏÖòÏù¥ ÏûàÏúºÎ©¥ Î£®Ìä∏Î°ú Î≥µÍ∑Ä
        if let tab = self.view.window?.rootViewController as? UITabBarController,
           let nav = tab.selectedViewController as? UINavigationController {
            nav.popToRootViewController(animated: true)
            return
        }
    }

    @MainActor
    private func pruneRoomCreateFromNavStackIfNeeded() {
        guard let nav = self.navigationController,
              let idx = nav.viewControllers.firstIndex(of: self),
              idx > 0, nav.viewControllers[idx-1] is RoomCreateViewController else { return }
        var vcs = nav.viewControllers
        vcs.remove(at: idx-1)
        nav.setViewControllers(vcs, animated: false)
    }

    @MainActor
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        self.attachInteractiveDismissGesture()
        
        if let room = self.room {
            ChatViewController.currentRoomID = room.ID
        } // ‚úÖ ÌòÑÏû¨ Î∞© ID Ï†ÄÏû•
        pruneRoomCreateFromNavStackIfNeeded()
    }
    
    @objc private func settingButtonTapped() {
        Task { @MainActor in
            guard let room = self.room else { return }
            let roomID = room.ID ?? ""
            
            let (profiles, imageNames): ([UserProfile], [String]) = try await Task.detached(priority: .utility) {
                let p = try GRDBManager.shared.fetchUserProfiles(inRoom: roomID)
                let names = try GRDBManager.shared.fetchImageNames(inRoom: roomID)
                return (p, names)
            }.value
            
            var images = [UIImage]()
            for imageName in imageNames {
                if let image = await KingFisherCacheManager.shared.loadImage(named: imageName) {
                    images.append(image)
                }
            }
            
            self.detachInteractiveDismissGesture()
            
            let settingVC = ChatRoomSettingCollectionView(room: room, profiles: profiles, images: images)
            self.presentSettingVC(settingVC)
            
            settingVC.onRoomUpdated = { [weak self] updatedRoom in
                guard let self = self else { return }
                Task { @MainActor in
                    let old = self.room
                    self.room = updatedRoom
                    await self.applyRoomDiffs(old: old, new: updatedRoom)
                }
            }
        }
    }
    
    @MainActor
    private func presentSettingVC(_ VC: ChatRoomSettingCollectionView) {
        guard settingPanelVC == nil else { return }
        settingPanelVC = VC
        
        if dimView.superview == nil {
            view.addSubview(dimView)
            
            let dimTap = UITapGestureRecognizer(target: self, action: #selector(didTapDimView))
            dimTap.cancelsTouchesInView = true
            dimView.addGestureRecognizer(dimTap)
            tapGesture.require(toFail: dimTap)
            
            NSLayoutConstraint.activate([
                dimView.topAnchor.constraint(equalTo: view.topAnchor),
                dimView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
                dimView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
                dimView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
            ])
        }
        
        addChild(VC)
        view.addSubview(VC.view)
        VC.didMove(toParent: self)
        
        let width = floor(view.bounds.width * 0.7)
        let height = view.bounds.height
        let targetX = view.bounds.width - width
        
        VC.view.layer.cornerRadius = 16
        VC.view.clipsToBounds = true
        VC.view.frame = CGRect(x: view.bounds.width, y: 0, width: width, height: height)
        
        UIView.animate(withDuration: 0.28, delay: 0, options: [.curveEaseOut]) {
            self.dimView.alpha = 1
            VC.view.frame.origin.x = targetX
        }
    }
    
    @objc private func didTapDimView() {
        dismissSettingVC()
    }
    
    @MainActor
    private func dismissSettingVC() {
        guard let VC = settingPanelVC else { return }
        
        print(#function, "Ìò∏Ï∂ú")
        
        VC.willMove(toParent: nil)
        UIView.animate(withDuration: 0.24, delay: 0, options: [.curveEaseIn]) {
            self.dimView.alpha = 0
            VC.view.frame.origin.x = self.view.bounds.width
        } completion: { _ in
            VC.view.removeFromSuperview()
            VC.removeFromParent()
            self.settingPanelVC = nil
        }
        
        self.attachInteractiveDismissGesture()
    }
    
    @MainActor
    private func updateNavigationTitle(with room: ChatRoom) {
        // ‚úÖ Ïª§Ïä§ÌÖÄ ÎÇ¥ÎπÑÍ≤åÏù¥ÏÖò Î∞î ÌÉÄÏù¥ÌãÄ ÏóÖÎç∞Ïù¥Ìä∏
        customNavigationBar.configureForChatRoom(
            roomTitle: room.roomName,
            participantCount: room.participants.count,
            target: self,
            onBack: #selector(backButtonTapped),
            onSearch: #selector(searchButtonTapped),
            onSetting: #selector(settingButtonTapped)
        )
    }
    
    //MARK: ÎåÄÌôî ÎÇ¥Ïö© Í≤ÄÏÉâ
    private func bindSearchEvents() {
        customNavigationBar.searchKeywordPublisher
            .receive(on: DispatchQueue.main)
            .sink { [weak self] keyword in
                guard let self = self else { return }
                
                self.clearPreviousHighlightIfNeeded()
                
                guard let keyword = keyword, !keyword.isEmpty else {
                    print(#function, "‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ keyword is empty ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ")
                    return
                }
                filterMessages(containing: keyword)
            }
            .store(in: &cancellables)
        
        customNavigationBar.cancelSearchPublisher
            .receive(on: DispatchQueue.main)
            .sink { [weak self] in
                guard let self = self else { return }
                self.exitSearchMode()
            }
            .store(in: &cancellables)
        
        searchUI.upPublisher
            .receive(on: DispatchQueue.main)
            .sink { [weak self] in
                guard let self = self else { return }
                currentFilteredMessageIndex! -= 1
                searchUI.updateSearchResult(filteredMessages.count, currentFilteredMessageIndex!)
                moveToMessageAndShake(currentFilteredMessageIndex!)
            }
            .store(in: &cancellables)
        
        searchUI.downPublisher
            .receive(on: DispatchQueue.main)
            .sink { [weak self] in
                guard let self = self else { return }
                currentFilteredMessageIndex! += 1
                searchUI.updateSearchResult(filteredMessages.count, currentFilteredMessageIndex!)
                moveToMessageAndShake(currentFilteredMessageIndex!)
            }
            .store(in: &cancellables)
    }
    
    @MainActor
    private func filterMessages(containing keyword: String) {
        Task {
            do {
                guard let room = self.room else { return }
                let roomID = room.ID ?? ""
                
                filteredMessages = try await GRDBManager.shared.fetchMessages(in: room.ID ?? "", containing: keyword)
                currentFilteredMessageIndex = filteredMessages.isEmpty == true ? nil : filteredMessages.count
                currentSearchKeyword = keyword
                highlightedMessageIDs = Set(filteredMessages.map { $0.ID })
                applyHighlight()
                
            } catch {
                print("Î©îÏãúÏßÄ ÏóÜÏùå")
            }
        }
    }
    
    @MainActor
    private func moveToMessageAndShake(_ idx: Int) {
        let message = filteredMessages[idx-1]
        guard let indexPath = indexPath(of: message) else { return }
        
        if let cell = chatMessageCollectionView.cellForItem(at: indexPath) as? ChatMessageCell {
            cell.shakeHorizontally()
        } else {
            chatMessageCollectionView.scrollToMessage(at: indexPath)
            scrollTargetIndex = indexPath
        }
    }
    
    @MainActor
    private func applyHighlight() {
        var snapshot = dataSource.snapshot()
        
        let itemsToRealod = snapshot.itemIdentifiers.compactMap { item -> Item? in
            if case let .message(message) = item, highlightedMessageIDs.contains(message.ID){
                return .message(message)
            }
            return nil
        }
        
        if !itemsToRealod.isEmpty {
            snapshot.reconfigureItems(itemsToRealod)
            dataSource.apply(snapshot, animatingDifferences: false)
        }
        
        searchUI.updateSearchResult(highlightedMessageIDs.count, currentFilteredMessageIndex ?? 0)
        if let idx = currentFilteredMessageIndex { moveToMessageAndShake(idx) }
    }
    
    @MainActor
    private func clearPreviousHighlightIfNeeded() {
        var snapshot = dataSource.snapshot()
        
        let itemsToRealod = snapshot.itemIdentifiers.compactMap { item -> Item? in
            if case let .message(message) = item, highlightedMessageIDs.contains(message.ID){
                return .message(message)
            }
            return nil
        }
        
        highlightedMessageIDs.removeAll()
        currentSearchKeyword = nil
        scrollTargetIndex = nil
        
        if !itemsToRealod.isEmpty {
            snapshot.reconfigureItems(itemsToRealod)
            dataSource.apply(snapshot, animatingDifferences: false)
        }
        
        searchUI.updateSearchResult(highlightedMessageIDs.count, currentFilteredMessageIndex ?? 0)
    }
    
    @MainActor
    private func exitSearchMode() {
        // üîπ Search UI Ïà®Í∏∞Í≥† Chat UI Î≥µÏõê
        self.searchUI.isHidden = true
        self.chatUIView.isHidden = false
        
        clearPreviousHighlightIfNeeded()
    }
    
    @MainActor
    private func setupSearchUI() {
        if searchUI.superview == nil {
            view.addSubview(searchUI)
            searchUIBottomConstraint = searchUI.bottomAnchor.constraint(equalTo: view.keyboardLayoutGuide.topAnchor, constant: -10)
            
            NSLayoutConstraint.activate([
                searchUI.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),
                searchUI.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),
                searchUIBottomConstraint!,
                searchUI.heightAnchor.constraint(equalToConstant: 50)
            ])
        }
    }
    
    @MainActor
    @objc private func searchButtonTapped() {
        customNavigationBar.switchToSearchMode()
        setupSearchUI()
        
        searchUI.isHidden = false
        chatUIView.isHidden = true
    }
    
    private func indexPath(of message: ChatMessage) -> IndexPath? {
        let snapshot = dataSource.snapshot()
        let items = snapshot.itemIdentifiers(inSection: .main)
        if let row = items.firstIndex(where: { $0 == .message(message) }) {
            return IndexPath(item: row, section: 0)
        } else {
            return nil
        }
    }
    
    //MARK: Î©îÏãúÏßÄ ÏÇ≠Ï†ú/ÎãµÏû•/Î≥µÏÇ¨ Í¥ÄÎ†®
    @MainActor
    private func showCustomMenu(at indexPath: IndexPath/*, aboveCell: Bool*/) {
        guard let cell = chatMessageCollectionView.cellForItem(at: indexPath) as? ChatMessageCell,
              let item = dataSource.itemIdentifier(for: indexPath),
              case let .message(message) = item,
              message.isDeleted == false else { return }
        
        // 1.ÏÖÄ Í∞ïÏ°∞ÌïòÍ∏∞
        cell.setHightlightedOverlay(true)
        highlightedCell = cell
        
        // ÏÖÄÏùò bounds Í∏∞Ï§ÄÏúºÎ°ú Ïª¨Î†âÏÖòÎ∑∞ ÎÇ¥ ÌîÑÎ†àÏûÑ Í≥ÑÏÇ∞
        let cellFrameInCollection = cell.convert(cell.bounds, to: chatMessageCollectionView/*.collectionView*/)
        let cellCenterY = cellFrameInCollection.midY
        
        // Ïª¨Î†âÏÖò Î∑∞ Í∏∞Ï§Ä Ï§ëÏïô ÏÇ¨Ïö© (ÌôîÎ©¥ Ï†àÎ∞ò)
        let screenMiddleY = chatMessageCollectionView.bounds.midY
        let showAbove: Bool = cellCenterY > screenMiddleY
        
        // Ïã†Í≥† or ÏÇ≠Ï†ú Í≤∞Ï†ï
        if let userProfile = LoginManager.shared.currentUserProfile,
           let room = self.room {
            let isOwner = userProfile.nickname == message.senderNickname
            let isAdmin = room.creatorID == userProfile.email
            
            chatCustomMenu.configurePermissions(canDelete: isOwner || isAdmin, canAnnounce: isAdmin)
        }
        
        // 2.Î©îÎâ¥ ÏúÑÏπòÎ•º ÏÖÄ Í∏∞Ï§ÄÏúºÎ°ú
        view.addSubview(chatCustomMenu)
        NSLayoutConstraint.activate([
            showAbove ? chatCustomMenu.bottomAnchor.constraint(equalTo: cell.referenceView.topAnchor, constant: -8) : chatCustomMenu.topAnchor.constraint(equalTo: cell.referenceView.bottomAnchor, constant: 8),
            
            LoginManager.shared.userProfile?.nickname == message.senderNickname ? chatCustomMenu.trailingAnchor.constraint(equalTo: cell.referenceView.trailingAnchor, constant: 0) : chatCustomMenu.leadingAnchor.constraint(equalTo: cell.referenceView.leadingAnchor, constant: 0)
        ])
        
        // 3. Î≤ÑÌäº Ïï°ÏÖò ÏÑ§Ï†ï
        setChatMenuActions(for: message)
    }
    
    private func setChatMenuActions(for message: ChatMessage) {
        chatCustomMenu.onReply = { [weak self] in
            guard let self = self else { return }
            self.handleReply(message: message)
            self.dismissCustomMenu()
        }
        
        chatCustomMenu.onCopy = { [weak self] in
            guard let self = self else { return }
            self.handleCopy(message: message)
            self.dismissCustomMenu()
        }
        
        chatCustomMenu.onDelete = { [weak self] in
            guard let self = self else { return }
            ConfirmView.present(in: self.view,
                                message: "ÏÇ≠Ï†ú Ïãú Î™®Îì† ÏÇ¨Ïö©ÏûêÏùò Ï±ÑÌåÖÏ∞ΩÏóêÏÑú Î©îÏãúÏßÄÍ∞Ä ÏÇ≠Ï†úÎêòÎ©∞\n‚ÄòÏÇ≠Ï†úÎêú Î©îÏãúÏßÄÏûÖÎãàÎã§.‚ÄôÎ°ú ÌëúÍ∏∞Îê©ÎãàÎã§.",
                                onConfirm: { [weak self] in
                guard let self = self else { return }
                self.handleDelete(message: message)
            })
            self.dismissCustomMenu()
        }
        
        chatCustomMenu.onReport = { [weak self] in
            self?.handleReport(message: message)
            self?.dismissCustomMenu()
        }
        
        chatCustomMenu.onAnnounce = { [weak self] in
            guard let self = self else { return }
            print(#function, "Í≥µÏßÄ:", message.msg ?? "")
            
            ConfirmView.presentAnnouncement(in: self.view, onConfirm: { [weak self] in
                guard let self = self else { return }
                self.handleAnnouncement(message)
            })
            
            self.dismissCustomMenu()
        }
    }
    
    private func handleAnnouncement(_ message: ChatMessage) {
        let announcement = AnnouncementPayload(text: message.msg ?? "", authorID: LoginManager.shared.currentUserProfile?.nickname ?? "", createdAt: Date())
        Task { @MainActor in
            guard let room = self.room else { return }
            try await FirebaseManager.shared.setActiveAnnouncement(roomID: room.ID ?? "", messageID: message.ID, payload: announcement)
            showSuccess("Í≥µÏßÄÎ•º Îì±Î°ùÌñàÏäµÎãàÎã§.")
        }
    }
    
    @MainActor
    private func handleReport(message: ChatMessage) {
        print(#function, "Ïã†Í≥†:", message.msg ?? "")
        // ÌïÑÏöî Ïãú UI ÌîºÎìúÎ∞±
        showSuccess("Î©îÏãúÏßÄÍ∞Ä Ïã†Í≥†ÎêòÏóàÏäµÎãàÎã§.")
    }
    
    @MainActor
    private func handleReply(message: ChatMessage) {
        print(#function, "ÎãµÏû•:", message)
        self.replyMessage = ReplyPreview(messageID: message.ID, sender: message.senderNickname, text: message.msg ?? "", isDeleted: false)
        replyView.configure(with: message)
        replyView.isHidden = false
    }
    
    private func handleCopy(message: ChatMessage) {
        UIPasteboard.general.string = message.msg
        print(#function, "Î≥µÏÇ¨:", message)
        // ÌïÑÏöî Ïãú UI ÌîºÎìúÎ∞±
        showSuccess("Î©îÏãúÏßÄÍ∞Ä Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§.")
    }
    
    private func handleDelete(message: ChatMessage) {
        Task {
            guard let room = self.room else { return }
            let messageID = message.ID
            do {
                // 1. GRDB ÏóÖÎç∞Ïù¥Ìä∏
                try await GRDBManager.shared.updateMessagesIsDeleted([messageID], isDeleted: true, inRoom: room.ID ?? "")
                try GRDBManager.shared.deleteImageIndex(forMessageID: messageID, inRoom: roomID)
                
                // 2. Firestore ÏóÖÎç∞Ïù¥Ìä∏
                do {
                    try await FirebaseManager.shared.updateMessageIsDeleted(roomID: room.ID ?? "", messageID: messageID)
                    
                    // Gather non-empty, unique paths from attachments
                    let rawPaths: [String] = message.attachments.flatMap { att in
                        return [att.pathThumb, att.pathOriginal]
                    }.compactMap { $0 }.filter { !$0.isEmpty }
                    
                    guard !rawPaths.isEmpty else { return }
                    
                    var seen = Set<String>()
                    let uniquePaths = rawPaths.filter { seen.insert($0).inserted }
                    
                    await withTaskGroup(of: Void.self) { group in
                        for path in uniquePaths {
                            group.addTask { [weak self] in
                                guard let self else { return }
                                FirebaseStorageManager.shared.deleteImageFromStorage(path: path)
                            }
                        }
                    }
                    
                    print("‚úÖ Î©îÏãúÏßÄ ÏÇ≠Ï†ú ÏÑ±Í≥µ: \(messageID)")
                } catch {
                    print("‚ùå Î©îÏãúÏßÄ Firestore ÏÇ≠Ï†ú Ï≤òÎ¶¨ Ïã§Ìå®:", error)
                }
            } catch {
                print("‚ùå Î©îÏãúÏßÄ ÏÇ≠Ï†ú Ï≤òÎ¶¨ Ïã§Ìå®:", error)
            }
        }
    }
    
    @objc private func handleLongPress(_ gesture: UILongPressGestureRecognizer) {
        guard gesture.state == .began else { return }
        let location = gesture.location(in: chatMessageCollectionView)
        if let indexPath = chatMessageCollectionView.indexPathForItem(at: location) {
            guard let room = self.room,
                  room.participants.contains(LoginManager.shared.getUserEmail) else { return }
            showCustomMenu(at: indexPath)
        }
    }
    
    @objc private func handleAnnouncementBannerLongPress(_ gesture: UILongPressGestureRecognizer) {
        guard gesture.state == .began,
              let room = self.room,
              room.creatorID == LoginManager.shared.getUserEmail else { return }
        
        // ÌôïÏù∏ ÌåùÏóÖ ‚Üí ÏÇ≠Ï†ú Ïã§Ìñâ
        ConfirmView.present(
            in: self.view,
            message: "ÌòÑÏû¨ Í≥µÏßÄÎ•º ÏÇ≠Ï†úÌï†ÍπåÏöî?\nÏÇ≠Ï†ú Ïãú Î™®Îì† ÏÇ¨Ïö©ÏûêÏùò Î∞∞ÎÑàÏóêÏÑú ÏÇ¨ÎùºÏßëÎãàÎã§.",
            style: .prominent,
            onConfirm: { [weak self] in
                guard let self = self else { return }
                Task { @MainActor in
                    do {
                        try await FirebaseManager.shared.clearActiveAnnouncement(roomID: room.ID ?? "")
                        self.updateAnnouncementBanner(with: nil)   // Î∞∞ÎÑà Ïà®ÍπÄ + Ïù∏ÏÖã Î≥µÏõê
                        self.showSuccess("Í≥µÏßÄÎ•º ÏÇ≠Ï†úÌñàÏäµÎãàÎã§.")
                    } catch {
                        self.showSuccess("Í≥µÏßÄ ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.")
                        print("‚ùå Í≥µÏßÄ ÏÇ≠Ï†ú Ïã§Ìå®:", error)
                    }
                }
            }
        )
    }
    
    private func dismissCustomMenu() {
        if let cell = highlightedCell { cell.setHightlightedOverlay(false) }
        highlightedCell = nil
        chatCustomMenu.removeFromSuperview()
    }
    
    @MainActor
    private func showSuccess(_ text: String) {
        notiView.configure(text)
        
        if notiView.isHidden { notiView.isHidden = false }
        
        // Ï¥àÍ∏∞ ÏÉÅÌÉú: Î≥¥Ïù¥ÏßÄ ÏïäÍ≥†, ÏïΩÍ∞Ñ Ï∂ïÏÜå ÏÉÅÌÉú
        self.notiView.alpha = 0
        self.notiView.transform = CGAffineTransform(scaleX: 0.8, y: 0.8)
        
        // fade-in + ÌôïÎåÄ Ïï†ÎãàÎ©îÏù¥ÏÖò
        UIView.animate(withDuration: 0.5, animations: {
            self.notiView.alpha = 1
            self.notiView.transform = .identity
        }) { _ in
            // fade-outÎßå, scale Î≥ÄÌôî ÏóÜÏù¥ ÏßÑÌñâ
            UIView.animate(withDuration: 0.5, delay: 0.6, options: [], animations: {
                self.notiView.alpha = 0
            }, completion: { _ in
                // Ï¥àÍ∏∞ ÏÉÅÌÉúÎ°ú transformÏùÄ Ïú†ÏßÄ (ÌôïÎåÄ ÏÉÅÌÉú Ïú†ÏßÄ)
                self.notiView.transform = CGAffineTransform(scaleX: 0.8, y: 0.8)
            })
        }
    }
    
    @MainActor
    private func setupAnnouncementBannerIfNeeded() {
        guard announcementBanner.superview == nil else { return }
        
        view.addSubview(announcementBanner)
        NSLayoutConstraint.activate([
            announcementBanner.topAnchor.constraint(equalTo: customNavigationBar.bottomAnchor),
            announcementBanner.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            announcementBanner.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ])
        // Í∏∞Î≥∏ Ïù∏ÏÖã Ï†ÄÏû• (ÏµúÏ¥à Ìïú Î≤à)
        if baseTopInsetForBanner == nil {
            baseTopInsetForBanner = chatMessageCollectionView.contentInset.top
        }
        view.bringSubviewToFront(announcementBanner)
    }
    
    /// ÌòÑÏû¨ ÌôúÏÑ± Í≥µÏßÄ Î∞∞ÎÑàÎ•º Í∞±Ïã† (Í≥†Ï†ï Î∞∞ÎÑà ÏÇ¨Ïö©)
    @MainActor
    private func updateAnnouncementBanner(with payload: AnnouncementPayload?) {
        setupAnnouncementBannerIfNeeded()
        
        guard let payload = payload else {
            // Í≥µÏßÄ ÏóÜÏùå ‚Üí Î∞∞ÎÑà Ïà®ÍπÄ Î∞è Ïù∏ÏÖã Î≥µÏõê
            if !announcementBanner.isHidden {
                announcementBanner.isHidden = true
                view.layoutIfNeeded()
                adjustForBannerHeight()
            }
            return
        }
        // Î∞∞ÎÑà Íµ¨ÏÑ± Î∞è ÌëúÏãú
        announcementBanner.configure(text: payload.text,
                                     authorID: payload.authorID,
                                     createdAt: payload.createdAt,
                                     pinned: true)
        if announcementBanner.isHidden { announcementBanner.isHidden = false }
        view.layoutIfNeeded()
        adjustForBannerHeight()
    }
    
    @MainActor
    private func adjustForBannerHeight() {
        guard let base = baseTopInsetForBanner else { return }
        let height = announcementBanner.isHidden ? 0 : announcementBanner.systemLayoutSizeFitting(UIView.layoutFittingCompressedSize).height
        let extra = height > 0 ? height + 8 : 0
        var inset = chatMessageCollectionView.contentInset
        inset.top = base + extra
        chatMessageCollectionView.contentInset = inset
        chatMessageCollectionView.verticalScrollIndicatorInsets.top = inset.top
    }
    
    private func setupCopyReplyDeleteView() {
        view.addSubview(notiView)
        NSLayoutConstraint.activate([
            notiView.widthAnchor.constraint(equalToConstant: UIScreen.main.bounds.width * 0.7),
            notiView.heightAnchor.constraint(equalTo: chatUIView.heightAnchor),
            
            notiView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            notiView.bottomAnchor.constraint(equalTo: chatUIView.topAnchor, constant: -10),
        ])
        view.bringSubviewToFront(notiView)
        
        view.addSubview(replyView)
        NSLayoutConstraint.activate([
            replyView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            replyView.bottomAnchor.constraint(equalTo: chatUIView.topAnchor, constant: -10),
            replyView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 10),
            replyView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -10),
            replyView.heightAnchor.constraint(equalToConstant: 43)
        ])
        view.bringSubviewToFront(replyView)
    }
    
    private func isCurrentUser(_ email: String?) -> Bool {
        return (email ?? "") == LoginManager.shared.getUserEmail
    }
    private func isCurrentUserAdmin(of room: ChatRoom) -> Bool {
        return room.creatorID == LoginManager.shared.getUserEmail
    }
    
    //MARK: Diffable Data Source
    private func configureDataSource() {
        dataSource = UICollectionViewDiffableDataSource<Section, Item>(collectionView: chatMessageCollectionView) { [unowned self] collectionView, indexPath, item in
            switch item {
            case .message(let message):
                let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ChatMessageCell.reuseIdentifier, for: indexPath) as! ChatMessageCell
                
                // ‚úÖ Always prefer the latest state from messageMap
                let latestMessage = self.messageMap[message.ID] ?? message
                let latestImages = self.messageImages[message.ID] ?? []
                
                if !latestMessage.attachments.isEmpty {
                    cell.configureWithImage(with: latestMessage, images: latestImages)
                } else {
                    cell.configureWithMessage(with: latestMessage)
                }
                
                // ‚ñ∂Ô∏é overlay + duration for first video attachment (cached)
                do {
                    let orderedAttachments = latestMessage.attachments.sorted { $0.index < $1.index }
                    if let firstVideo = orderedAttachments.first(where: { $0.type == .video }) {
                        // Ïö∞ÏÑ† Î∞∞ÏßÄ ÌëúÏãú(ÌÖçÏä§Ìä∏Îäî ÌõÑÏÜçÏúºÎ°ú Ï±ÑÏõÄ)
                        cell.showVideoBadge(durationText: nil)

                        let key = firstVideo.hash.isEmpty ? firstVideo.pathOriginal : firstVideo.hash
                        if let seconds = self.videoDurationCache[key] {
                            cell.showVideoBadge(durationText: self.formatDuration(seconds))
                        } else {
                            // Í∏∏Ïù¥ ÎπÑÎèôÍ∏∞ Í≥ÑÏÇ∞(Î°úÏª¨/ÏõêÍ≤© Î™®Îëê ÏßÄÏõê) ÌõÑ, ÏïÑÏßÅ Î≥¥Ïù¥Îäî ÏÖÄÏù¥Î©¥ ÏóÖÎç∞Ïù¥Ìä∏
                            Task { [weak self, weak collectionView] in
                                guard let self = self else { return }
                                if let sec = await self.fetchVideoDuration(for: firstVideo) {
                                    self.videoDurationCache[key] = sec
                                    await MainActor.run {
                                        if let cv = collectionView,
                                           let visibleCell = cv.cellForItem(at: indexPath) as? ChatMessageCell {
                                            visibleCell.showVideoBadge(durationText: self.formatDuration(sec))
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        cell.hideVideoBadge()
                    }
                }
                
                // ‚úÖ Íµ¨ÎèÖ Ï†ïÎ¶¨Ïö© Bag Ï§ÄÎπÑ
                let key = ObjectIdentifier(cell)
                cellSubscriptions[key] = Set<AnyCancellable>()
                
                // Ïù¥ÎØ∏ÏßÄ/ÎπÑÎîîÏò§ ÌÉ≠
                cell.imageTapPublisher
                    .sink { [weak self] tappedIndex in
                        guard let self else { return }
                        guard let i = tappedIndex else { return }

                        // ÏµúÏã† Î©îÏãúÏßÄ ÏÉÅÌÉú ÌôïÏù∏
                        let currentMessage = self.messageMap[message.ID] ?? message
                        let attachments = currentMessage.attachments.sorted { $0.index < $1.index }
                        guard i >= 0, i < attachments.count else { return }
                        let att = attachments[i]

                        if att.type == .video {
                            let path = att.pathOriginal
                            guard !path.isEmpty else { return }

                            // Î°úÏª¨(Ïã§Ìå® Î©îÏãúÏßÄ) Í≤ΩÎ°úÎ©¥ Î∞îÎ°ú ÌååÏùº Ïû¨ÏÉù, ÏïÑÎãàÎ©¥ Storage Í≤ΩÎ°úÎ°ú Ï∫êÏãú+Ïû¨ÏÉù
                            if path.hasPrefix("/") || path.hasPrefix("file://") {
                                let url = path.hasPrefix("file://") ? URL(string: path)! : URL(fileURLWithPath: path)
                                self.playVideo(from: url)
                            } else {
                                Task { @MainActor in
                                    await self.playVideoForStoragePath(path)
                                }
                            }
                        } else {
                            // Ïù¥ÎØ∏ÏßÄ Ï≤®Î∂Ä ÌÉ≠ ‚Üí Í∏∞Ï°¥ Î∑∞Ïñ¥ Ïú†ÏßÄ
                            self.presentImageViewer(tappedIndex: i, indexPath: indexPath)
                        }
                    }
                    .store(in: &cellSubscriptions[key]!)
                
                let keyword = self.highlightedMessageIDs.contains(latestMessage.ID) ? self.currentSearchKeyword : nil
                cell.highlightKeyword(keyword)
                
                return cell
            case .dateSeparator(let date):
                let cell = collectionView.dequeueReusableCell(withReuseIdentifier: DateSeperatorCell.reuseIdentifier, for: indexPath) as! DateSeperatorCell
                
                let dateText = self.formatDateToDayString(date)
                cell.configureWithDate(dateText)
                
                return cell
                
            case .readMarker:
                let cell = collectionView.dequeueReusableCell(withReuseIdentifier: readMarkCollectionViewCell.reuseIdentifier, for: indexPath) as! readMarkCollectionViewCell
                
                cell.configure()
                return cell
            }
        }
        
        chatMessageCollectionView.setCollectionViewDataSource(dataSource)
        applySnapshot([])
    }
    
    // MARK: - Diffable animation heuristics
    private func shouldAnimateDifferences(for updateType: MessageUpdateType, newItemCount: Int) -> Bool {
        switch updateType {
        case .newer:
            // ÏÇ¨Ïö©ÏûêÍ∞Ä Í±∞Ïùò Î∞îÎã•(ÏµúÍ∑º Î©îÏãúÏßÄ Í∑ºÏ≤ò)Ïóê ÏûàÍ≥†, ÏÉà Ìï≠Î™©Ïù¥ ÏÜåÎüâÏùº ÎïåÎßå Ïï†ÎãàÎ©îÏù¥ÏÖò
            return newItemCount > 0 && newItemCount <= 20 && isNearBottom()
        case .older, .reload, .initial:
            return false
        }
    }
    
    private func isNearBottom(threshold: CGFloat = 120) -> Bool {
        let contentHeight = chatMessageCollectionView.contentSize.height
        let visibleMaxY = chatMessageCollectionView.contentOffset.y + chatMessageCollectionView.bounds.height
        return (contentHeight - visibleMaxY) <= threshold
    }
    
    func applySnapshot(_ items: [Item]) {
        var snapshot = dataSource.snapshot()
        if snapshot.sectionIdentifiers.isEmpty { snapshot.appendSections([Section.main]) }
        snapshot.appendItems(items, toSection: .main)
        dataSource.apply(snapshot, animatingDifferences: false)
        chatMessageCollectionView.scrollToBottom()
    }
    
    @MainActor
    func addMessages(_ messages: [ChatMessage], updateType: MessageUpdateType = .initial) {
        // Îπ†Î•∏ Í∞ÄÎìú: Îπà ÏûÖÎ†•, reload Ï†ÑÏö© Ï≤òÎ¶¨
        guard !messages.isEmpty else { return }
        let windowSize = 300
        var snapshot = dataSource.snapshot()
        
        if updateType == .reload {
            reloadDeletedMessages(messages)
            return
        }
        
        // 1) ÌòÑÏû¨ Ïä§ÎÉÖÏÉ∑Ïóê Ï°¥Ïû¨ÌïòÎäî Î©îÏãúÏßÄ ID ÏßëÌï© (O(1) Ï°∞Ìöå)
        let existingIDs: Set<String> = Set(
            snapshot.itemIdentifiers.compactMap { item -> String? in
                if case .message(let m) = item { return m.ID }
                return nil
            }
        )
        
        // 2) ÏïàÏ†ïÏ†Å Ï§ëÎ≥µ Ï†úÍ±∞(ÏûÖÎ†• Î∞∞Ïó¥ ÎÇ¥ Ï§ëÎ≥µ ID Ï†úÍ±∞, ÏõêÎûò ÏàúÏÑú Ïú†ÏßÄ)
        var seen = Set<String>()
        var deduped: [ChatMessage] = []
        deduped.reserveCapacity(messages.count)
        for msg in messages {
            if !seen.contains(msg.ID) {
                seen.insert(msg.ID)
                deduped.append(msg)
            }
        }
        
        // 3) Ïù¥ÎØ∏ ÌëúÏãú Ï§ëÏù∏ Ìï≠Î™© Ï†úÍ±∞
        let incoming = deduped.filter { !existingIDs.contains($0.ID) }
        guard !incoming.isEmpty else { return } // Î≥ÄÍ≤Ω ÏóÜÏùå ‚Üí Ïä§ÎÉÖÏÉ∑ apply Î∂àÌïÑÏöî
        
        // 4) ÏãúÍ∞Ñ Ïàú Ï†ïÎ†¨(Ïò§Î¶ÑÏ∞®Ïàú)Î°ú ÎÇ†Ïßú Íµ¨Î∂ÑÏÑ†/ÏÇΩÏûÖ ÏïàÏ†ïÌôî
        let now = Date()
        let sorted = incoming.sorted { (a, b) -> Bool in
            (a.sentAt ?? now) < (b.sentAt ?? now)
        }
        
        // 5) ÏÉà ÏïÑÏù¥ÌÖú Íµ¨ÏÑ± (ÎÇ†Ïßú Íµ¨Î∂ÑÏÑ† Ìè¨Ìï®)
        let items = buildNewItems(from: sorted)
        guard !items.isEmpty else { return }
        
        // 6) Ïä§ÎÉÖÏÉ∑ ÏÇΩÏûÖ & ÏùΩÏùå ÎßàÏª§ Ï≤òÎ¶¨ & Í∞ÄÏÉÅÌôî(ÏúàÎèÑÏö∞ ÌÅ¨Í∏∞ Ï†úÌïú)
        insertItems(items, into: &snapshot, updateType: updateType)
        insertReadMarkerIfNeeded(sorted, items: items, into: &snapshot, updateType: updateType)
        applyVirtualization(on: &snapshot, updateType: updateType, windowSize: windowSize)
        
        // 7) ÏµúÏ¢Ö Î∞òÏòÅ
        let animate = shouldAnimateDifferences(for: updateType, newItemCount: items.count)
        dataSource.apply(snapshot, animatingDifferences: animate)
    }
    
    // MARK: - Private Helpers for addMessages
    private func reloadDeletedMessages(_ messages: [ChatMessage]) {
        // 1) ÏµúÏã† ÏÉÅÌÉúÎ•º Î®ºÏ†Ä Ï∫êÏãú
        for msg in messages { messageMap[msg.ID] = msg }
        
        // 2) Ïä§ÎÉÖÏÉ∑ÏóêÏÑú Ïã§Ï†úÎ°ú Ï°¥Ïû¨ÌïòÎäî ÎèôÏùº ID ÏïÑÏù¥ÌÖúÎßå Ï∂îÎ†§ÏÑú reload
        var snapshot = dataSource.snapshot()
        let targetIDs = Set(messages.map { $0.ID })
        let itemsToReload = snapshot.itemIdentifiers.filter { item in
            if case let .message(m) = item { return targetIDs.contains(m.ID) }
            return false
        }
        
        guard !itemsToReload.isEmpty else { return }
        snapshot.reloadItems(itemsToReload)
        dataSource.apply(snapshot, animatingDifferences: false)
    }
    
    private func buildNewItems(from newMessages: [ChatMessage]) -> [Item] {
        var items: [Item] = []
        for message in newMessages {
            messageMap[message.ID] = message
            let messageDate = Calendar.current.startOfDay(for: message.sentAt ?? Date())
            if lastMessageDate == nil || lastMessageDate! != messageDate {
                items.append(.dateSeparator(message.sentAt ?? Date()))
                lastMessageDate = messageDate
            }
            
            items.append(.message(message))
        }
        
        return items
    }
    
    private func insertItems(_ items: [Item], into snapshot: inout NSDiffableDataSourceSnapshot<Section, Item>, updateType: MessageUpdateType) {
        if updateType == .older {
            if let firstItem = snapshot.itemIdentifiers.first {
                snapshot.insertItems(items, beforeItem: firstItem)
            } else {
                snapshot.appendItems(items, toSection: .main)
            }
        } else {
            snapshot.appendItems(items, toSection: .main)
        }
        
    }
    
    private func insertReadMarkerIfNeeded(_ newMessages: [ChatMessage], items: [Item], into snapshot: inout NSDiffableDataSourceSnapshot<Section, Item>, updateType: MessageUpdateType) {
        let hasReadMarker = snapshot.itemIdentifiers.contains { if case .readMarker = $0 { return true } else { return false } }
        if updateType == .newer, !hasReadMarker, let lastMessageID = self.lastReadMessageID, !isUserInCurrentRoom,
           let firstMessage = newMessages.first, firstMessage.ID != lastMessageID {
            if let firstNewItem = items.first(where: { if case .message = $0 { return true } else { return false } }) {
                snapshot.insertItems([.readMarker], beforeItem: firstNewItem)
            }
        }
    }
    
    private func applyVirtualization(on snapshot: inout NSDiffableDataSourceSnapshot<Section, Item>, updateType: MessageUpdateType, windowSize: Int) {
        let allItems = snapshot.itemIdentifiers
        if allItems.count > windowSize {
            let toRemoveCount = allItems.count - windowSize
            if updateType == .older {
                let itemsToRemove = Array(allItems.suffix(toRemoveCount))
                snapshot.deleteItems(itemsToRemove)
            } else if updateType == .newer {
                let itemsToRemove = Array(allItems.prefix(toRemoveCount))
                snapshot.deleteItems(itemsToRemove)
            }
        }
        // --- Virtualization cleanup: prune messageMap and date separators ---
        let allItemsAfterVirtualization = snapshot.itemIdentifiers
        let remainingMessageIDs: Set<String> = Set(
            allItemsAfterVirtualization.compactMap { item in
                if case .message(let m) = item { return m.ID } else { return nil }
            }
        )
        messageMap = messageMap.filter { remainingMessageIDs.contains($0.key) }
        var dateSeparatorsToDelete: [Item] = []
        let presentMessageDates: Set<Date> = Set(
            allItemsAfterVirtualization.compactMap { item in
                if case .message(let m) = item {
                    return Calendar.current.startOfDay(for: m.sentAt ?? Date())
                }
                return nil
            }
        )
        for item in allItemsAfterVirtualization {
            if case .dateSeparator(let date) = item {
                let day = Calendar.current.startOfDay(for: date)
                if !presentMessageDates.contains(day) {
                    dateSeparatorsToDelete.append(item)
                }
            }
        }
        if !dateSeparatorsToDelete.isEmpty {
            snapshot.deleteItems(dateSeparatorsToDelete)
        }
        // --- End of cleanup ---
    }
    
    private func updateCollectionView(with newItems: [Item]) {
        var snapshot = dataSource.snapshot()
        snapshot.appendItems(newItems, toSection: .main)
        let animate = shouldAnimateDifferences(for: .newer, newItemCount: newItems.count)
        dataSource.apply(snapshot, animatingDifferences: animate)
        chatMessageCollectionView.scrollToBottom()
    }
    
    // Ï∫êÏãúÎêú Ìè¨Îß∑ÌÑ∞
    private lazy var dayFormatter: DateFormatter = {
        let f = DateFormatter()
        f.locale = Locale(identifier: "ko_KR")
        f.dateFormat = "yyyyÎÖÑ MÏõî dÏùº EEEE"
        return f
    }()
    private func formatDateToDayString(_ date: Date) -> String {
        return dayFormatter.string(from: date)
    }
    
    //MARK: Tap Gesture
    @MainActor
    @objc private func handleTapGesture() {
        
        if settingPanelVC != nil { return }
        view.endEditing(true)
        
        if !self.attachmentView.isHidden {
            chatUIView.attachmentButton.setImage(UIImage(systemName: "plus"), for: .normal)
            self.attachmentView.isHidden = true
            self.attachmentView.alpha = 0
            
            self.chatUIViewBottomConstraint?.constant = -10
            
            UIView.animate(withDuration: 0.25) {
                self.view.layoutIfNeeded()
            }
        }
        
        if chatCustomMenu.superview != nil {
            dismissCustomMenu()
        }
    }
    
    //MARK: ÌÇ§Î≥¥Îìú Í¥ÄÎ†®
    private func bindKeyboardPublisher() {
        NotificationCenter.default.publisher(for: UIApplication.keyboardWillShowNotification)
            .sink { [weak self] notification in
                guard let self = self else { return }
                self.keyboardWillShow(notification)
            }
            .store(in: &cancellables)
        
        NotificationCenter.default.publisher(for: UIApplication.keyboardWillHideNotification)
            .sink { [weak self] notification in
                guard let self = self else { return }
                self.keyboardWillHide(notification)
            }
            .store(in: &cancellables)
    }
    
    @objc private func keyboardWillShow(_ sender: Notification) {
        guard let animationDuration = sender.userInfo?[UIResponder.keyboardAnimationDurationUserInfoKey] as? Double,
              let _ = sender.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue else { return }
        
        // Hide attachment view if visible
        if !self.attachmentView.isHidden {
            self.attachmentView.isHidden = true
            self.chatUIView.attachmentButton.setImage(UIImage(systemName: "plus"), for: .normal)
            self.chatUIViewBottomConstraint?.constant = 0
        }
        UIView.animate(withDuration: animationDuration) {
            self.view.layoutIfNeeded()
        }
    }
    
    @objc private func keyboardWillHide(_ sender: Notification) {
        guard let animationDuration = sender.userInfo?[UIResponder.keyboardAnimationDurationUserInfoKey] as? Double,
              let _ = sender.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? CGRect else { return }
        
        UIView.animate(withDuration: animationDuration) {
            self.view.layoutIfNeeded()
        }
    }
    
    //MARK: Í∏∞ÌÉÄ
    private func showAlert(error: RoomCreationError) {
        var title: String
        var message: String
        
        switch error {
        case .saveFailed:
            title = "Ï†ÄÏû• Ïã§Ìå®"
            message = "Ï±ÑÌåÖÎ∞© Ï†ïÎ≥¥ Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî."
        case .imageUploadFailed:
            title = "Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ïã§Ìå®"
            message = "Î∞© Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî."
        default:
            title = "Ïò§Î•ò"
            message = "Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
        }
        
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "ÌôïÏù∏", style: .default) { action in
            self.navigationController?.popViewController(animated: true)
        })
    }
    
    // MARK: Ïù¥ÎØ∏ÏßÄ Î∑∞Ïñ¥ Í¥ÄÎ†®
    // Cache for Firebase Storage download URLs (path -> URL)
    actor StorageURLCache {
        private var cache: [String: URL] = [:]
        func url(for path: String) async throws -> URL {
            if let u = cache[path] { return u }
            let ref = Storage.storage().reference(withPath: path)
            let url = try await withCheckedThrowingContinuation { cont in
                ref.downloadURL { url, err in
                    if let url { cont.resume(returning: url) }
                    else { cont.resume(throwing: err ?? NSError(domain: "Storage", code: -1)) }
                }
            }
            cache[path] = url
            return url
        }
    }
    // Kingfisher prefetchers & URL cache
    private var imagePrefetchers: [ImagePrefetcher] = []
    private let imageStorageURLCache = StorageURLCache()
    
    private func presentImageViewer(tappedIndex: Int, indexPath: IndexPath) {
        print(#function, "startingAt: \(tappedIndex), for: \(indexPath)")
        
        // 1) Î©îÏãúÏßÄ & Ï≤®Î∂Ä ÏàòÏßë
        guard let item = dataSource.itemIdentifier(for: indexPath),
              case .message(let chatMessage) = item else { return }
        
        let messageID = chatMessage.ID
        guard let message = messageMap[messageID] else { return }
        print(#function, "Chat Message:", messageMap[messageID] ?? [])
        
        //        let imageAttachments = message.attachments
        //            .filter { $0.type == .image }
        //            .sorted { $0.index < $1.index }
        
        let imageAttachments = chatMessage.attachments
            .filter { $0.type == .image }
            .sorted { $0.index < $1.index }
        
        // ÏõêÎ≥∏ Ïö∞ÏÑ†, ÏóÜÏúºÎ©¥ Ïç∏ÎÑ§Ïùº
        let storagePaths: [String] = imageAttachments.compactMap { att in
            if !att.pathOriginal.isEmpty { return att.pathOriginal }
            if !att.pathThumb.isEmpty { return att.pathThumb }
            return nil
        }
        guard !storagePaths.isEmpty else { return }
        
        // 2) Ïù¥Ï†Ñ ÌîÑÎ¶¨Ìå®Ïπò Ï§ëÎã®
        stopAllPrefetchers()
        
        // 3) Ïö∞ÏÑ†ÏàúÏúÑ(ÎßÅ Ïò§Îçî)
        let count = storagePaths.count
        let start = max(0, min(tappedIndex, count - 1))
        let order = ringOrderIndices(count: count, start: start)
        let prioritizedPaths = order.map { storagePaths[$0] }
        
        // Í∑ºÏ≤ò 6~8Ïû•Îßå Î©îÎ™®Î¶¨ ÏõåÎ∞ç
        let nearCount = min(8, prioritizedPaths.count)
        let nearPaths = Array(prioritizedPaths.prefix(nearCount))
        let restPaths = Array(prioritizedPaths.dropFirst(nearCount))
        
        // ÏòµÏÖò
        let diskOnlyOptions: KingfisherOptionsInfo = [
            .cacheOriginalImage,
            .memoryCacheExpiration(.expired),   // Î©îÎ™®Î¶¨Îäî Ï¶âÏãú ÎßåÎ£å ‚Üí ÏÇ¨Ïã§ÏÉÅ ÎπÑÌôúÏÑ±
            .diskCacheExpiration(.days(60)),
            .backgroundDecode,
            .transition(.none)
        ]
        let warmOptions: KingfisherOptionsInfo = [
            .cacheOriginalImage,
            .memoryCacheExpiration(.seconds(180)), // Í∑ºÏ≤òÎßå Ïû†Íπê Î©îÎ™®Î¶¨ ÏõåÎ∞ç (3Î∂Ñ)
            .diskCacheExpiration(.days(60)),
            .backgroundDecode,
            .transition(.none)
        ]

        // 4) ÌîÑÎ¶¨Ìå®Ïπò: Í∑ºÏ≤ò ‚Üí ÎÇòÎ®∏ÏßÄ
        Task {
            let nearURLs = await resolveURLs(for: nearPaths, concurrent: 6)
            startPrefetch(urls: nearURLs, label: "near", options: warmOptions)
            
            if !restPaths.isEmpty {
                let restURLs = await resolveURLs(for: restPaths, concurrent: 6)
                startPrefetch(urls: restURLs, label: "rest", options: diskOnlyOptions)
            }
        }
        
        // 5) Î∑∞Ïñ¥ ÌëúÏãú (ÏõêÎûò ÏàúÏÑú)
        Task { @MainActor in
            let urlsAll = await resolveURLs(for: storagePaths, concurrent: 6)
            guard !urlsAll.isEmpty else { return }
            
            let viewer = SimpleImageViewerVC(urls: urlsAll, startIndex: start)
            viewer.modalPresentationStyle = .fullScreen
            viewer.modalTransitionStyle = .crossDissolve
            self.present(viewer, animated: true)
        }
    }
    
    // Stop and clear all active Kingfisher prefetchers
    private func stopAllPrefetchers() {
        imagePrefetchers.forEach { $0.stop() }
        imagePrefetchers.removeAll()
    }
    
    // Ring-order: start, +1, -1, +2, -2, ...
    private func ringOrderIndices(count: Int, start: Int) -> [Int] {
        guard count > 0 else { return [] }
        let s = max(0, min(start, count - 1))
        var result: [Int] = [s]; var step = 1
        while result.count < count {
            let r = s + step; if r < count { result.append(r) }
            if result.count == count { break }
            let l = s - step; if l >= 0 { result.append(l) }
            step += 1
        }
        return result
    }
    
    // Storage Í≤ΩÎ°ú -> URL (ÎèôÏãúÏÑ± Ï†úÌïú)
    private func resolveURLs(for paths: [String], concurrent: Int = 6) async -> [URL] {
        guard !paths.isEmpty else { return [] }
        var urls = Array<URL?>(repeating: nil, count: paths.count)
        var idx = 0
        while idx < paths.count {
            let end = min(idx + concurrent, paths.count)
            await withTaskGroup(of: (Int, URL?).self) { group in
                for i in idx..<end {
                    let p = paths[i]
                    group.addTask { [storageURLCache] in
                        do { return (i, try await storageURLCache.url(for: p)) }
                        catch { return (i, nil) }
                    }
                }
                for await (i, u) in group { urls[i] = u }
            }
            idx = end
        }
        return urls.compactMap { $0 }
    }
    
    // Kingfisher ÌîÑÎ¶¨Ìå®Ïπò ÏãúÏûë (ÏòµÏÖò Ï£ºÏûÖ)
    private func startPrefetch(urls: [URL], label: String, options: KingfisherOptionsInfo) {
        guard !urls.isEmpty else { return }
        let pf = ImagePrefetcher(
            urls: urls,
            options: options,
            progressBlock: nil,
            completionHandler: { skipped, failed, completed in
                print("üßØ Prefetch[\(label)] done - completed: \(completed.count), failed: \(failed.count), skipped: \(skipped.count)")
            }
        )
        imagePrefetchers.append(pf)
        pf.start()
    }
}

private extension ChatViewController {
    @MainActor
    func setupCustomNavigationBar() {
        self.view.addSubview(customNavigationBar)
        NSLayoutConstraint.activate([
            customNavigationBar.topAnchor.constraint(equalTo: self.view.topAnchor),
            customNavigationBar.leadingAnchor.constraint(equalTo: self.view.leadingAnchor),
            customNavigationBar.trailingAnchor.constraint(equalTo: self.view.trailingAnchor),
        ])
        
        guard let room = self.room else { return }
        customNavigationBar.configureForChatRoom(
            roomTitle: room.roomName,
            participantCount: room.participants.count,
            target: self,
            onBack: #selector(backButtonTapped),
            onSearch: #selector(searchButtonTapped),
            onSetting: #selector(settingButtonTapped)
        )
    }
}

extension ChatViewController: UIScrollViewDelegate {
    func scrollViewDidEndScrollingAnimation(_ scrollView: UIScrollView) {
        triggerShakeIfNeeded()
    }
    
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        triggerShakeIfNeeded()
    }
    
    func scrollViewDidEndDragging(_ scrollView: UIScrollView, willDecelerate decelerate: Bool) {
        if !decelerate {
            triggerShakeIfNeeded()
        }
    }
    
    @MainActor
    private func triggerShakeIfNeeded() {
        guard let indexPath = scrollTargetIndex,
              let cell = chatMessageCollectionView.cellForItem(at: indexPath) as? ChatMessageCell else {
            return
        }
        cell.shakeHorizontally()
        scrollTargetIndex = nil  // Ï¥àÍ∏∞Ìôî
    }
}

extension ChatViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView,
                        willDisplay cell: UICollectionViewCell,
                        forItemAt indexPath: IndexPath) {
        
        let itemCount = collectionView.numberOfItems(inSection: 0)
        
        // ‚úÖ Older Î©îÏãúÏßÄ Î°úÎìú
        if indexPath.item < 5, hasMoreOlder, !isLoadingOlder {
            if let lastIndex = Self.lastTriggeredOlderIndex,
               abs(lastIndex - indexPath.item) < minTriggerDistance {
                return // ÎÑàÎ¨¥ Í∞ÄÍπåÏö¥ ÏúÑÏπòÏóêÏÑú Îòê Ìò∏Ï∂ú ‚Üí Î¨¥Ïãú
            }
            Self.lastTriggeredOlderIndex = indexPath.item
            
            Task {
                let firstID = dataSource.snapshot().itemIdentifiers.compactMap { item -> String? in
                    if case let .message(msg) = item { return msg.ID }
                    return nil
                }.first
                await loadOlderMessages(before: firstID)
            }
        }
        
        // ‚úÖ Newer Î©îÏãúÏßÄ Î°úÎìú
        if indexPath.item > itemCount - 5, hasMoreNewer, !isLoadingNewer {
            if let lastIndex = Self.lastTriggeredNewerIndex,
               abs(lastIndex - indexPath.item) < minTriggerDistance {
                return
            }
            Self.lastTriggeredNewerIndex = indexPath.item
            
            Task {
                let lastID = dataSource.snapshot().itemIdentifiers.compactMap { item -> String? in
                    if case let .message(msg) = item { return msg.ID }
                    return nil
                }.last
                await loadNewerMessagesIfNeeded(after: lastID)
            }
        }
        
        // ‚úÖ ÏïÑÎ∞îÌÉÄ ÌîÑÎ¶¨Ìå®Ïπò: Í∞ÄÏãúÏòÅÏó≠ Ï§ëÏã¨ ¬±100 Î©îÏãúÏßÄÏùò Í≥†Ïú† Î∞úÏã†Ïûê
        self.prefetchAvatarsAroundDisplayIndex(indexPath.item)
    }
}
